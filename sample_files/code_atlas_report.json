{
  "recon_data": {
    "classes": {
      "admin_manager.OperationType": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "USER_MANAGEMENT": {
            "type": "auto"
          },
          "SYSTEM_CONFIGURATION": {
            "type": "auto"
          },
          "DATA_MIGRATION": {
            "type": "auto"
          },
          "SECURITY_AUDIT": {
            "type": "auto"
          },
          "PERFORMANCE_TUNING": {
            "type": "auto"
          },
          "BACKUP_RESTORE": {
            "type": "auto"
          },
          "MONITORING_SETUP": {
            "type": "auto"
          }
        }
      },
      "admin_manager.OperationStatus": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "PENDING": {
            "type": "auto"
          },
          "IN_PROGRESS": {
            "type": "auto"
          },
          "COMPLETED": {
            "type": "auto"
          },
          "FAILED": {
            "type": "auto"
          },
          "CANCELLED": {
            "type": "auto"
          }
        }
      },
      "admin_manager.OperationResult": {
        "parents": [],
        "attributes": {
          "operation_id": {
            "type": "str"
          },
          "operation_type": {
            "type": "OperationType"
          },
          "status": {
            "type": "OperationStatus"
          },
          "start_time": {
            "type": "datetime"
          },
          "end_time": {
            "type": "Optional[datetime]"
          },
          "success": {
            "type": "bool"
          },
          "message": {
            "type": "str"
          },
          "data": {
            "type": "Dict[str, Any]"
          },
          "errors": {
            "type": "List[str]"
          },
          "warnings": {
            "type": "List[str]"
          }
        }
      },
      "admin_manager.AdminManager": {
        "parents": [],
        "attributes": {
          "operations_history": {
            "type": "Dict[str, OperationResult]"
          },
          "active_operations": {
            "type": "Set[str]"
          },
          "operation_lock": {
            "type": "threading.RLock"
          },
          "admin_permissions": {
            "type": "Dict[str, Set[OperationType]]"
          },
          "system_config": {
            "type": "Dict[str, Any]"
          },
          "audit_log": {
            "type": "List[Dict[str, Any]]"
          }
        }
      },
      "database_manager.DatabaseConnection": {
        "parents": [],
        "attributes": {
          "connection_id": {
            "type": "str"
          },
          "is_open": {
            "type": "int"
          },
          "in_transaction": {
            "type": "int"
          },
          "isolation_level": {
            "type": "str"
          },
          "query_count": {
            "type": "int"
          },
          "last_query_time": {
            "type": "time.time"
          },
          "lock": {
            "type": "threading.RLock"
          }
        }
      },
      "database_manager.TransactionManager": {
        "parents": [],
        "attributes": {
          "connection": {
            "type": "DatabaseConnection"
          },
          "isolation_level": {
            "type": "str"
          },
          "transaction_started": {
            "type": "int"
          },
          "start_time": {
            "type": "Optional[float]"
          },
          "operations_count": {
            "type": "int"
          }
        }
      },
      "decorators.DecoratorRegistry": {
        "parents": [],
        "attributes": {
          "registered_decorators": {
            "type": "Dict[str, Callable]"
          },
          "decorator_chains": {
            "type": "Dict[str, List[str]]"
          },
          "active_traces": {
            "type": "List[str]"
          }
        }
      },
      "decorators.ClassBasedDecorator": {
        "parents": [],
        "attributes": {
          "config": {
            "type": "Dict[str, Any]"
          },
          "call_count": {
            "type": "int"
          },
          "last_call_time": {
            "type": "int"
          }
        }
      },
      "decorators.PropertyDecorator": {
        "parents": [],
        "attributes": {
          "validator": {
            "type": "Optional[Callable]"
          },
          "transformer": {
            "type": "Optional[Callable]"
          },
          "cache": {
            "type": "bool"
          },
          "_cache_storage": {
            "type": "Dict[int, Any]"
          }
        }
      },
      "event_validator.ValidationLevel": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "INFO": {
            "type": "auto"
          },
          "WARNING": {
            "type": "auto"
          },
          "ERROR": {
            "type": "auto"
          },
          "CRITICAL": {
            "type": "auto"
          }
        }
      },
      "event_validator.ValidationResult": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "VALID": {
            "type": "auto"
          },
          "INVALID": {
            "type": "auto"
          },
          "REQUIRES_REVIEW": {
            "type": "auto"
          },
          "CONDITIONALLY_VALID": {
            "type": "auto"
          }
        }
      },
      "event_validator.ValidationError": {
        "parents": [],
        "attributes": {
          "field": {
            "type": "str"
          },
          "message": {
            "type": "str"
          },
          "level": {
            "type": "ValidationLevel"
          },
          "code": {
            "type": "str"
          },
          "context": {
            "type": "Dict[str, Any]"
          },
          "suggestions": {
            "type": "List[str]"
          }
        }
      },
      "event_validator.ValidationReport": {
        "parents": [],
        "attributes": {
          "result": {
            "type": "ValidationResult"
          },
          "errors": {
            "type": "List[ValidationError]"
          },
          "warnings": {
            "type": "List[ValidationError]"
          },
          "metadata": {
            "type": "Dict[str, Any]"
          },
          "validation_time": {
            "type": "float"
          },
          "rules_applied": {
            "type": "List[str]"
          }
        }
      },
      "event_validator.ValidationRule": {
        "parents": [
          "Protocol"
        ],
        "attributes": {}
      },
      "event_validator.BaseValidationRule": {
        "parents": [
          "ABC"
        ],
        "attributes": {
          "rule_name": {
            "type": "str"
          },
          "description": {
            "type": "str"
          },
          "enabled": {
            "type": "int"
          },
          "priority": {
            "type": "int"
          },
          "dependencies": {
            "type": "List[str]"
          }
        }
      },
      "event_validator.RequiredFieldRule": {
        "parents": [
          "event_validator.BaseValidationRule"
        ],
        "attributes": {
          "required_fields": {
            "type": "List[str]"
          }
        }
      },
      "event_validator.DataTypeRule": {
        "parents": [
          "event_validator.BaseValidationRule"
        ],
        "attributes": {
          "field_types": {
            "type": "Dict[str, Union[type, List[type]]]"
          }
        }
      },
      "event_validator.RegexValidationRule": {
        "parents": [
          "event_validator.BaseValidationRule"
        ],
        "attributes": {
          "field_patterns": {
            "type": "Dict[str, str]"
          },
          "compiled_patterns": {
            "type": "Unknown"
          }
        }
      },
      "event_validator.ValidationEngine": {
        "parents": [],
        "attributes": {
          "rules": {
            "type": "List[BaseValidationRule]"
          },
          "global_context": {
            "type": "Dict[str, Any]"
          },
          "validation_cache": {
            "type": "Dict[str, ValidationReport]"
          },
          "cache_enabled": {
            "type": "int"
          }
        }
      },
      "event_validator.ValidationRuleBuilder": {
        "parents": [],
        "attributes": {
          "engine": {
            "type": "ValidationEngine"
          },
          "current_rules": {
            "type": "List[BaseValidationRule]"
          }
        }
      },
      "event_validator.EventValidator": {
        "parents": [],
        "attributes": {
          "validation_engine": {
            "type": "ValidationEngine"
          },
          "event_schemas": {
            "type": "Dict[str, ValidationEngine]"
          }
        }
      },
      "event_validator.MessageValidator": {
        "parents": [],
        "attributes": {
          "content_filters": {
            "type": "List[Callable[[str], bool]]"
          },
          "banned_patterns": {
            "type": "List[re.Pattern]"
          },
          "validation_cache": {
            "type": "Dict[str, bool]"
          }
        }
      },
      "inheritence_complex.Priority": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "LOW": {
            "type": "auto"
          },
          "MEDIUM": {
            "type": "auto"
          },
          "HIGH": {
            "type": "auto"
          },
          "CRITICAL": {
            "type": "auto"
          }
        }
      },
      "inheritence_complex.ProcessingResult": {
        "parents": [],
        "attributes": {
          "success": {
            "type": "bool"
          },
          "data": {
            "type": "Any"
          },
          "errors": {
            "type": "List[str]"
          },
          "metrics": {
            "type": "Dict[str, float]"
          },
          "timestamp": {
            "type": "float"
          }
        }
      },
      "inheritence_complex.AbstractProcessor": {
        "parents": [
          "ABC"
        ],
        "attributes": {
          "processor_id": {
            "type": "str"
          },
          "processed_count": {
            "type": "int"
          },
          "error_count": {
            "type": "int"
          }
        }
      },
      "inheritence_complex.AsyncProcessor": {
        "parents": [
          "inheritence_complex.AbstractProcessor"
        ],
        "attributes": {
          "async_queue": {
            "type": "List[Any]"
          },
          "batch_size": {
            "type": "int"
          }
        }
      },
      "inheritence_complex.CacheableMixin": {
        "parents": [],
        "attributes": {
          "_cache": {
            "type": "Dict[str, Any]"
          },
          "_cache_hits": {
            "type": "int"
          },
          "_cache_misses": {
            "type": "int"
          }
        }
      },
      "inheritence_complex.ValidatedMixin": {
        "parents": [],
        "attributes": {
          "validation_rules": {
            "type": "List[callable]"
          },
          "validation_errors": {
            "type": "List[str]"
          }
        }
      },
      "inheritence_complex.MetricsMixin": {
        "parents": [],
        "attributes": {
          "custom_metrics": {
            "type": "Dict[str, List[float]]"
          },
          "metric_callbacks": {
            "type": "Dict[str, List[callable]]"
          }
        }
      },
      "inheritence_complex.BasicDataProcessor": {
        "parents": [
          "inheritence_complex.AsyncProcessor",
          "inheritence_complex.CacheableMixin",
          "inheritence_complex.ValidatedMixin"
        ],
        "attributes": {
          "enable_cache": {
            "type": "bool"
          }
        }
      },
      "inheritence_complex.AdvancedProcessor": {
        "parents": [
          "inheritence_complex.BasicDataProcessor",
          "inheritence_complex.MetricsMixin"
        ],
        "attributes": {
          "priority": {
            "type": "Priority"
          },
          "processing_strategy": {
            "type": "str"
          }
        }
      },
      "inheritence_complex.SpecializedProcessor": {
        "parents": [
          "inheritence_complex.AdvancedProcessor"
        ],
        "attributes": {
          "specialization": {
            "type": "str"
          },
          "specialist_cache": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "inheritence_complex.ProcessorProtocol": {
        "parents": [
          "Protocol"
        ],
        "attributes": {}
      },
      "inheritence_complex.GenericProcessor": {
        "parents": [],
        "attributes": {
          "input_type": {
            "type": "type"
          },
          "output_type": {
            "type": "type"
          },
          "type_conversion_cache": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "inheritence_complex.UltimateProcessor": {
        "parents": [
          "inheritence_complex.SpecializedProcessor"
        ],
        "attributes": {
          "ultimate_features_enabled": {
            "type": "int"
          },
          "cross_references": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "proxy_handler.ProxyConfig": {
        "parents": [],
        "attributes": {
          "cache_enabled": {
            "type": "bool"
          },
          "logging_enabled": {
            "type": "bool"
          },
          "metrics_enabled": {
            "type": "bool"
          },
          "timeout_seconds": {
            "type": "float"
          },
          "retry_attempts": {
            "type": "int"
          },
          "circuit_breaker_enabled": {
            "type": "bool"
          }
        }
      },
      "proxy_handler.ProxyMetrics": {
        "parents": [],
        "attributes": {
          "call_count": {
            "type": "int"
          },
          "success_count": {
            "type": "int"
          },
          "error_count": {
            "type": "int"
          },
          "cache_hits": {
            "type": "int"
          },
          "cache_misses": {
            "type": "int"
          },
          "total_execution_time": {
            "type": "float"
          },
          "average_execution_time": {
            "type": "float"
          },
          "last_error_time": {
            "type": "Optional[float]"
          },
          "last_success_time": {
            "type": "Optional[float]"
          }
        }
      },
      "proxy_handler.BaseProxy": {
        "parents": [
          "ABC"
        ],
        "attributes": {
          "target": {
            "type": "Any"
          },
          "config": {
            "type": "Unknown"
          },
          "metrics": {
            "type": "ProxyMetrics"
          },
          "cache": {
            "type": "Dict[str, Any]"
          },
          "lock": {
            "type": "threading.RLock"
          },
          "circuit_breaker_open": {
            "type": "int"
          },
          "circuit_breaker_failures": {
            "type": "int"
          },
          "circuit_breaker_last_failure": {
            "type": "float"
          }
        }
      },
      "proxy_handler.DataProxy": {
        "parents": [
          "proxy_handler.BaseProxy"
        ],
        "attributes": {
          "data_validators": {
            "type": "Dict[str, List[Callable]]"
          },
          "data_transformers": {
            "type": "Dict[str, List[Callable]]"
          }
        }
      },
      "proxy_handler.HavenProxy": {
        "parents": [
          "proxy_handler.BaseProxy"
        ],
        "attributes": {
          "user_cache": {
            "type": "Dict[str, Any]"
          },
          "room_permissions": {
            "type": "Dict[str, Set[str]]"
          }
        }
      },
      "proxy_handler.UserProxy": {
        "parents": [
          "proxy_handler.BaseProxy"
        ],
        "attributes": {
          "user_data": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "session_manager.SessionState": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "CREATED": {
            "type": "auto"
          },
          "ACTIVE": {
            "type": "auto"
          },
          "IDLE": {
            "type": "auto"
          },
          "SUSPENDED": {
            "type": "auto"
          },
          "EXPIRED": {
            "type": "auto"
          },
          "TERMINATED": {
            "type": "auto"
          }
        }
      },
      "session_manager.UserRole": {
        "parents": [
          "Enum"
        ],
        "attributes": {
          "GUEST": {
            "type": "auto"
          },
          "USER": {
            "type": "auto"
          },
          "MODERATOR": {
            "type": "auto"
          },
          "ADMIN": {
            "type": "auto"
          },
          "SYSTEM": {
            "type": "auto"
          }
        }
      },
      "session_manager.SessionMetrics": {
        "parents": [],
        "attributes": {
          "login_time": {
            "type": "datetime"
          },
          "last_activity": {
            "type": "datetime"
          },
          "activity_count": {
            "type": "int"
          },
          "data_transferred": {
            "type": "int"
          },
          "errors_encountered": {
            "type": "int"
          },
          "warnings_issued": {
            "type": "int"
          },
          "rooms_joined": {
            "type": "Set[str]"
          },
          "events_emitted": {
            "type": "int"
          },
          "events_received": {
            "type": "int"
          }
        }
      },
      "session_manager.UserSession": {
        "parents": [],
        "attributes": {
          "session_id": {
            "type": "str"
          },
          "user_id": {
            "type": "str"
          },
          "user_role": {
            "type": "UserRole"
          },
          "state": {
            "type": "SessionState"
          },
          "created_at": {
            "type": "datetime"
          },
          "expires_at": {
            "type": "datetime"
          },
          "last_activity": {
            "type": "datetime"
          },
          "ip_address": {
            "type": "str"
          },
          "user_agent": {
            "type": "str"
          },
          "permissions": {
            "type": "Set[str]"
          },
          "preferences": {
            "type": "Dict[str, Any]"
          },
          "metrics": {
            "type": "SessionMetrics"
          },
          "context_data": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "session_manager.SessionManager": {
        "parents": [],
        "attributes": {
          "haven_proxy": {
            "type": "HavenProxy"
          },
          "active_sessions": {
            "type": "Dict[str, UserSession]"
          },
          "user_sessions": {
            "type": "Dict[str, List[str]]"
          },
          "session_lock": {
            "type": "threading.RLock"
          },
          "current_session_id": {
            "type": "Optional[str]"
          },
          "session_callbacks": {
            "type": "Dict[str, List[Callable]]"
          },
          "cleanup_interval": {
            "type": "int"
          },
          "max_sessions_per_user": {
            "type": "int"
          },
          "event_handlers": {
            "type": "Dict[str, List[Callable]]"
          }
        }
      },
      "session_manager.SessionInteractionManager": {
        "parents": [],
        "attributes": {
          "session_manager": {
            "type": "SessionManager"
          },
          "interaction_log": {
            "type": "List[Dict[str, Any]]"
          },
          "user_relationships": {
            "type": "Dict[str, Set[str]]"
          },
          "session_analytics": {
            "type": "SessionAnalytics"
          }
        }
      },
      "session_manager.SessionAnalytics": {
        "parents": [],
        "attributes": {
          "session_manager": {
            "type": "SessionManager"
          },
          "analytics_cache": {
            "type": "Dict[str, Any]"
          }
        }
      },
      "socketio_events.SocketIOEventRegistry": {
        "parents": [],
        "attributes": {
          "socketio": {
            "type": "SocketIO"
          },
          "session_manager": {
            "type": "SessionManager"
          },
          "event_validator": {
            "type": "EventValidator"
          },
          "message_validator": {
            "type": "MessageValidator"
          },
          "registered_events": {
            "type": "Dict[str, Callable]"
          },
          "middleware_stack": {
            "type": "List[Callable]"
          }
        }
      }
    },
    "functions": {
      "admin_manager.OperationResult.get_duration": {
        "return_type": "Optional[timedelta]",
        "param_types": {}
      },
      "admin_manager.OperationResult.add_error": {
        "return_type": "None",
        "param_types": {
          "error": "str"
        }
      },
      "admin_manager.OperationResult.add_warning": {
        "return_type": "None",
        "param_types": {
          "warning": "str"
        }
      },
      "admin_manager.AdminManager.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "admin_manager.AdminManager._initialize_system_config": {
        "return_type": "None",
        "param_types": {}
      },
      "admin_manager.AdminManager.execute_operation": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "operation_type": "str",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._execute_specific_operation": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_user_management": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_system_configuration": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_data_migration": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_security_audit": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_performance_tuning": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_backup_restore": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._handle_monitoring_setup": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager._result_to_dict": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "result": "OperationResult"
        }
      },
      "admin_manager.AdminManager._add_audit_entry": {
        "return_type": "None",
        "param_types": {
          "result": "OperationResult",
          "parameters": "Dict[str, Any]"
        }
      },
      "admin_manager.AdminManager.get_operation_status": {
        "return_type": "Optional[Dict[str, Any]]",
        "param_types": {
          "operation_id": "str"
        }
      },
      "admin_manager.AdminManager.get_active_operations": {
        "return_type": "List[str]",
        "param_types": {}
      },
      "admin_manager.AdminManager.get_system_status": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "admin_manager.AdminManager.cancel_operation": {
        "return_type": "bool",
        "param_types": {
          "operation_id": "str"
        }
      },
      "database_manager.DatabaseConnection.__init__": {
        "return_type": null,
        "param_types": {
          "connection_id": "str"
        }
      },
      "database_manager.DatabaseConnection.execute": {
        "return_type": "Any",
        "param_types": {
          "query": "str",
          "params": "Optional[tuple]"
        }
      },
      "database_manager.DatabaseConnection.commit": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.DatabaseConnection.rollback": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.DatabaseConnection.begin_transaction": {
        "return_type": "None",
        "param_types": {
          "isolation_level": "Optional[str]"
        }
      },
      "database_manager.DatabaseConnection.close": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.DatabaseConnection.is_connected": {
        "return_type": "bool",
        "param_types": {}
      },
      "database_manager.DatabaseConnection.get_stats": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "database_manager.TransactionManager.__init__": {
        "return_type": null,
        "param_types": {
          "connection": "DatabaseConnection",
          "isolation_level": "str"
        }
      },
      "database_manager.TransactionManager.begin_transaction": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.TransactionManager.commit_transaction": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.TransactionManager.rollback_transaction": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.TransactionManager.close_connection": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.TransactionManager.execute_in_transaction": {
        "return_type": "Any",
        "param_types": {
          "query": "str",
          "params": "Optional[tuple]"
        }
      },
      "database_manager.TransactionManager.transaction_context": {
        "return_type": null,
        "param_types": {}
      },
      "database_manager.TransactionManager.get_transaction_info": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "database_manager.get_db_connection": {
        "return_type": "DatabaseConnection",
        "param_types": {}
      },
      "database_manager.close_all_connections": {
        "return_type": "None",
        "param_types": {}
      },
      "database_manager.get_pool_stats": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "database_manager.create_transaction_manager": {
        "return_type": "TransactionManager",
        "param_types": {
          "isolation_level": "str"
        }
      },
      "database_manager.database_transaction": {
        "return_type": null,
        "param_types": {
          "isolation_level": "str"
        }
      },
      "decorators.DecoratorRegistry.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "decorators.DecoratorRegistry.register_decorator": {
        "return_type": "None",
        "param_types": {
          "name": "str",
          "decorator": "Callable"
        }
      },
      "decorators.DecoratorRegistry.get_decorator_chain": {
        "return_type": "List[str]",
        "param_types": {
          "func_name": "str"
        }
      },
      "decorators.trace": {
        "return_type": "Callable",
        "param_types": {
          "func": "Optional[Callable]"
        }
      },
      "decorators.monitor_performance": {
        "return_type": "Callable",
        "param_types": {
          "func": "Optional[Callable]"
        }
      },
      "decorators.validate_auth": {
        "return_type": "Callable",
        "param_types": {
          "required_role": "Optional[str]",
          "check_session": "bool"
        }
      },
      "decorators.rate_limit": {
        "return_type": "Callable",
        "param_types": {
          "calls": "int",
          "period": "int",
          "per_user": "bool",
          "key_func": "Optional[Callable]"
        }
      },
      "decorators.ClassBasedDecorator.__init__": {
        "return_type": null,
        "param_types": {
          "config": "Dict[str, Any]"
        }
      },
      "decorators.ClassBasedDecorator.__call__": {
        "return_type": "Callable",
        "param_types": {
          "func": "Callable"
        }
      },
      "decorators.ClassBasedDecorator._validate_arguments": {
        "return_type": "None",
        "param_types": {
          "func": "Callable",
          "args": "tuple",
          "kwargs": "dict"
        }
      },
      "decorators.ClassBasedDecorator._transform_result": {
        "return_type": "Any",
        "param_types": {
          "result": "Any"
        }
      },
      "decorators.create_custom_decorator": {
        "return_type": "Callable",
        "param_types": {
          "name": "str",
          "pre_hook": "Optional[Callable]",
          "post_hook": "Optional[Callable]",
          "error_hook": "Optional[Callable]"
        }
      },
      "decorators.multi_decorator": {
        "return_type": "Callable",
        "param_types": {}
      },
      "decorators.conditional_decorator": {
        "return_type": "Callable",
        "param_types": {
          "condition": "Union[bool, Callable]",
          "decorator": "Callable"
        }
      },
      "decorators.advanced_cache": {
        "return_type": "Callable",
        "param_types": {
          "ttl": "int",
          "key_func": "Optional[Callable]",
          "serializer": "Optional[Callable]",
          "validator": "Optional[Callable]"
        }
      },
      "decorators.create_monitoring_decorator": {
        "return_type": "Callable",
        "param_types": {
          "metrics_collector": "Any"
        }
      },
      "decorators.transaction_decorator": {
        "return_type": "Callable",
        "param_types": {
          "isolation_level": "str",
          "rollback_on": "Optional[List[Type[Exception]]]"
        }
      },
      "decorators.PropertyDecorator.__init__": {
        "return_type": null,
        "param_types": {
          "validator": "Optional[Callable]",
          "transformer": "Optional[Callable]",
          "cache": "bool"
        }
      },
      "decorators.PropertyDecorator.__call__": {
        "return_type": "property",
        "param_types": {
          "func": "Callable"
        }
      },
      "decorators.complex_calculation": {
        "return_type": "Dict[str, float]",
        "param_types": {
          "data": "List[Dict[str, Any]]",
          "multiplier": "float"
        }
      },
      "decorators.admin_operation": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "operation_type": "str",
          "parameters": "Dict[str, Any]"
        }
      },
      "decorators.cached_expensive_operation": {
        "return_type": "Any",
        "param_types": {
          "input_data": "Any"
        }
      },
      "decorators.debug_function": {
        "return_type": "str",
        "param_types": {}
      },
      "decorators.multi_decorated_function": {
        "return_type": "str",
        "param_types": {
          "param": "str"
        }
      },
      "event_validator.ValidationReport.is_valid": {
        "return_type": "bool",
        "param_types": {}
      },
      "event_validator.ValidationReport.has_errors": {
        "return_type": "bool",
        "param_types": {}
      },
      "event_validator.ValidationReport.has_warnings": {
        "return_type": "bool",
        "param_types": {}
      },
      "event_validator.ValidationReport.get_error_codes": {
        "return_type": "List[str]",
        "param_types": {}
      },
      "event_validator.ValidationReport.add_error": {
        "return_type": "None",
        "param_types": {
          "field": "str",
          "message": "str",
          "code": "str",
          "level": "ValidationLevel",
          "context": "Dict[str, Any]",
          "suggestions": "List[str]"
        }
      },
      "event_validator.ValidationRule.validate": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.ValidationRule.get_rule_name": {
        "return_type": "str",
        "param_types": {}
      },
      "event_validator.BaseValidationRule.__init__": {
        "return_type": null,
        "param_types": {
          "rule_name": "str",
          "description": "str"
        }
      },
      "event_validator.BaseValidationRule._validate_implementation": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.BaseValidationRule.validate": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.BaseValidationRule.get_rule_name": {
        "return_type": "str",
        "param_types": {}
      },
      "event_validator.RequiredFieldRule.__init__": {
        "return_type": null,
        "param_types": {
          "required_fields": "List[str]"
        }
      },
      "event_validator.RequiredFieldRule._validate_implementation": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.DataTypeRule.__init__": {
        "return_type": null,
        "param_types": {
          "field_types": "Dict[str, Union[type, List[type]]]"
        }
      },
      "event_validator.DataTypeRule._validate_implementation": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.RegexValidationRule.__init__": {
        "return_type": null,
        "param_types": {
          "field_patterns": "Dict[str, str]"
        }
      },
      "event_validator.RegexValidationRule._validate_implementation": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.ValidationEngine.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "event_validator.ValidationEngine.add_rule": {
        "return_type": "'ValidationEngine'",
        "param_types": {
          "rule": "BaseValidationRule"
        }
      },
      "event_validator.ValidationEngine.add_rules": {
        "return_type": "'ValidationEngine'",
        "param_types": {
          "rules": "List[BaseValidationRule]"
        }
      },
      "event_validator.ValidationEngine.set_global_context": {
        "return_type": "'ValidationEngine'",
        "param_types": {
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.ValidationEngine.validate": {
        "return_type": "ValidationReport",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.ValidationEngine._generate_cache_key": {
        "return_type": "str",
        "param_types": {
          "data": "Any",
          "context": "Dict[str, Any]"
        }
      },
      "event_validator.ValidationEngine._merge_reports": {
        "return_type": "None",
        "param_types": {
          "main_report": "ValidationReport",
          "rule_report": "ValidationReport"
        }
      },
      "event_validator.ValidationEngine.create_rule_builder": {
        "return_type": "'ValidationRuleBuilder'",
        "param_types": {}
      },
      "event_validator.ValidationRuleBuilder.__init__": {
        "return_type": null,
        "param_types": {
          "engine": "ValidationEngine"
        }
      },
      "event_validator.ValidationRuleBuilder.require_fields": {
        "return_type": "'ValidationRuleBuilder'",
        "param_types": {}
      },
      "event_validator.ValidationRuleBuilder.field_types": {
        "return_type": "'ValidationRuleBuilder'",
        "param_types": {}
      },
      "event_validator.ValidationRuleBuilder.field_patterns": {
        "return_type": "'ValidationRuleBuilder'",
        "param_types": {}
      },
      "event_validator.ValidationRuleBuilder.build": {
        "return_type": "ValidationEngine",
        "param_types": {}
      },
      "event_validator.EventValidator.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "event_validator.EventValidator._setup_default_validations": {
        "return_type": "None",
        "param_types": {}
      },
      "event_validator.EventValidator.validate_event": {
        "return_type": "ValidationReport",
        "param_types": {
          "event_data": "Dict[str, Any]"
        }
      },
      "event_validator.EventValidator.validate_result": {
        "return_type": "bool",
        "param_types": {
          "result": "Any"
        }
      },
      "event_validator.EventValidator.get_validation_details": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "event_validator.MessageValidator.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "event_validator.MessageValidator._setup_default_filters": {
        "return_type": "None",
        "param_types": {}
      },
      "event_validator.MessageValidator.validate_message": {
        "return_type": "bool",
        "param_types": {
          "message": "str"
        }
      },
      "event_validator.MessageValidator.get_validation_details": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "event_validator.validate_complete_action": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "event_data": "Dict[str, Any]",
          "message_content": "str"
        }
      },
      "inheritence_complex.AbstractProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str"
        }
      },
      "inheritence_complex.AbstractProcessor.process_data": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.AbstractProcessor.validate_input": {
        "return_type": "bool",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.AbstractProcessor.get_statistics": {
        "return_type": "Dict[str, int]",
        "param_types": {}
      },
      "inheritence_complex.AbstractProcessor.log_operation": {
        "return_type": "None",
        "param_types": {
          "operation": "str",
          "details": "Optional[Dict[str, Any]]"
        }
      },
      "inheritence_complex.AsyncProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str"
        }
      },
      "inheritence_complex.AsyncProcessor.async_process_data": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.AsyncProcessor.batch_process": {
        "return_type": "List[ProcessingResult]",
        "param_types": {
          "data_list": "List[Any]"
        }
      },
      "inheritence_complex.AsyncProcessor.queue_for_async_processing": {
        "return_type": "None",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.CacheableMixin.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "inheritence_complex.CacheableMixin.get_cache_key": {
        "return_type": "str",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.CacheableMixin.get_from_cache": {
        "return_type": "Optional[Any]",
        "param_types": {
          "cache_key": "str"
        }
      },
      "inheritence_complex.CacheableMixin.store_in_cache": {
        "return_type": "None",
        "param_types": {
          "cache_key": "str",
          "data": "Any"
        }
      },
      "inheritence_complex.CacheableMixin.get_cache_statistics": {
        "return_type": "Dict[str, Union[int, float]]",
        "param_types": {}
      },
      "inheritence_complex.ValidatedMixin.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "inheritence_complex.ValidatedMixin.add_validation_rule": {
        "return_type": "None",
        "param_types": {
          "rule": "callable",
          "description": "str"
        }
      },
      "inheritence_complex.ValidatedMixin.comprehensive_validate": {
        "return_type": "bool",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.MetricsMixin.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "inheritence_complex.MetricsMixin.record_metric": {
        "return_type": "None",
        "param_types": {
          "metric_name": "str",
          "value": "float"
        }
      },
      "inheritence_complex.MetricsMixin.add_metric_callback": {
        "return_type": "None",
        "param_types": {
          "metric_name": "str",
          "callback": "callable"
        }
      },
      "inheritence_complex.MetricsMixin.get_metric_summary": {
        "return_type": "Optional[Dict[str, float]]",
        "param_types": {
          "metric_name": "str"
        }
      },
      "inheritence_complex.BasicDataProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str",
          "enable_cache": "bool"
        }
      },
      "inheritence_complex.BasicDataProcessor.validate_input": {
        "return_type": "bool",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.BasicDataProcessor.process_data": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.BasicDataProcessor._internal_process": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.AdvancedProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str",
          "priority": "Priority"
        }
      },
      "inheritence_complex.AdvancedProcessor.process_data": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.AdvancedProcessor._processing_time_callback": {
        "return_type": "None",
        "param_types": {
          "metric_name": "str",
          "value": "float",
          "history": "List[float]"
        }
      },
      "inheritence_complex.AdvancedProcessor._data_size_callback": {
        "return_type": "None",
        "param_types": {
          "metric_name": "str",
          "value": "float",
          "history": "List[float]"
        }
      },
      "inheritence_complex.AdvancedProcessor.change_processing_strategy": {
        "return_type": "bool",
        "param_types": {
          "new_strategy": "str"
        }
      },
      "inheritence_complex.SpecializedProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str",
          "specialization": "str"
        }
      },
      "inheritence_complex.SpecializedProcessor._validate_specialization": {
        "return_type": "bool",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.SpecializedProcessor._internal_process": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.SpecializedProcessor._process_numeric": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.SpecializedProcessor._process_text": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.SpecializedProcessor._process_structured": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.ProcessorProtocol.process_data": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.ProcessorProtocol.get_statistics": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "inheritence_complex.GenericProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "input_type": "type",
          "output_type": "type"
        }
      },
      "inheritence_complex.GenericProcessor.process_typed_data": {
        "return_type": "U",
        "param_types": {
          "data": "T"
        }
      },
      "inheritence_complex.GenericProcessor._create_type_converter": {
        "return_type": "callable",
        "param_types": {
          "from_type": "type",
          "to_type": "type"
        }
      },
      "inheritence_complex.UltimateProcessor.__init__": {
        "return_type": null,
        "param_types": {
          "processor_id": "str"
        }
      },
      "inheritence_complex.UltimateProcessor.ultimate_process": {
        "return_type": "ProcessingResult",
        "param_types": {
          "data": "Dict[str, Any]"
        }
      },
      "inheritence_complex.UltimateProcessor._apply_ultimate_enhancements": {
        "return_type": "Any",
        "param_types": {
          "data": "Any"
        }
      },
      "inheritence_complex.UltimateProcessor.ultimate_processing_context": {
        "return_type": null,
        "param_types": {}
      },
      "inheritence_complex.create_processor_hierarchy": {
        "return_type": "Dict[str, AbstractProcessor]",
        "param_types": {
          "processor_configs": "List[Dict[str, Any]]"
        }
      },
      "proxy_handler.ProxyMetrics.__init__": {
        "return_type": null,
        "param_types": {}
      },
      "proxy_handler.ProxyMetrics.record_call": {
        "return_type": "None",
        "param_types": {
          "execution_time": "float",
          "success": "bool",
          "cache_hit": "bool"
        }
      },
      "proxy_handler.ProxyMetrics.get_success_rate": {
        "return_type": "float",
        "param_types": {}
      },
      "proxy_handler.ProxyMetrics.get_cache_hit_rate": {
        "return_type": "float",
        "param_types": {}
      },
      "proxy_handler.BaseProxy.__init__": {
        "return_type": null,
        "param_types": {
          "target": "Any",
          "config": "ProxyConfig"
        }
      },
      "proxy_handler.BaseProxy._proxy_method_call": {
        "return_type": "Any",
        "param_types": {
          "method_name": "str"
        }
      },
      "proxy_handler.BaseProxy.__getattr__": {
        "return_type": "Any",
        "param_types": {
          "name": "str"
        }
      },
      "proxy_handler.BaseProxy._create_proxy_method": {
        "return_type": "Callable",
        "param_types": {
          "method_name": "str",
          "original_method": "Callable"
        }
      },
      "proxy_handler.BaseProxy._execute_with_circuit_breaker": {
        "return_type": "Any",
        "param_types": {
          "method_name": "str",
          "method": "Callable"
        }
      },
      "proxy_handler.BaseProxy._get_cache_key": {
        "return_type": "str",
        "param_types": {
          "method_name": "str"
        }
      },
      "proxy_handler.BaseProxy._metrics_context": {
        "return_type": null,
        "param_types": {
          "method_name": "str"
        }
      },
      "proxy_handler.DataProxy.__init__": {
        "return_type": null,
        "param_types": {
          "data_source": "Any",
          "config": "ProxyConfig"
        }
      },
      "proxy_handler.DataProxy._proxy_method_call": {
        "return_type": "Any",
        "param_types": {
          "method_name": "str"
        }
      },
      "proxy_handler.HavenProxy.__init__": {
        "return_type": null,
        "param_types": {
          "target": "Any",
          "config": "ProxyConfig"
        }
      },
      "proxy_handler.HavenProxy.validate_user_credentials": {
        "return_type": "bool",
        "param_types": {
          "auth_data": "Dict[str, Any]"
        }
      },
      "proxy_handler.HavenProxy.get_user_preferences": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_room_access": {
        "return_type": "bool",
        "param_types": {
          "user_id": "str",
          "room_name": "str"
        }
      },
      "proxy_handler.HavenProxy.get_user_info": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_admin_role": {
        "return_type": "bool",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_moderator_role": {
        "return_type": "bool",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.get_runner_capabilities": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "proxy_handler.HavenProxy.get_guest_limitations": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "proxy_handler.HavenProxy.validate_message_content": {
        "return_type": "bool",
        "param_types": {
          "message": "str",
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.log_room_message": {
        "return_type": "None",
        "param_types": {
          "room": "str",
          "user_id": "str",
          "message": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_direct_message_permission": {
        "return_type": "bool",
        "param_types": {
          "sender_id": "str",
          "recipient_id": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_broadcast_permission": {
        "return_type": "bool",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.get_room_statistics": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "room_name": "str"
        }
      },
      "proxy_handler.HavenProxy.validate_event_data": {
        "return_type": "bool",
        "param_types": {
          "event_name": "str",
          "data": "Dict[str, Any]",
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.process_event": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "event_name": "str",
          "data": "Dict[str, Any]",
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy.user_exists": {
        "return_type": "bool",
        "param_types": {
          "user_id": "str"
        }
      },
      "proxy_handler.HavenProxy._proxy_method_call": {
        "return_type": "Any",
        "param_types": {
          "method_name": "str"
        }
      },
      "proxy_handler.UserProxy.__init__": {
        "return_type": null,
        "param_types": {
          "user_data": "Dict[str, Any]",
          "config": "ProxyConfig"
        }
      },
      "proxy_handler.UserProxy.has_role": {
        "return_type": "bool",
        "param_types": {
          "role": "str"
        }
      },
      "proxy_handler.UserProxy.id": {
        "return_type": "str",
        "param_types": {}
      },
      "proxy_handler.UserProxy._proxy_method_call": {
        "return_type": "Any",
        "param_types": {
          "method_name": "str"
        }
      },
      "session_manager.UserSession.is_valid": {
        "return_type": "bool",
        "param_types": {}
      },
      "session_manager.UserSession.is_expired": {
        "return_type": "bool",
        "param_types": {}
      },
      "session_manager.UserSession.time_until_expiry": {
        "return_type": "timedelta",
        "param_types": {}
      },
      "session_manager.UserSession.update_activity": {
        "return_type": "None",
        "param_types": {}
      },
      "session_manager.SessionManager.__init__": {
        "return_type": null,
        "param_types": {
          "haven_proxy": "HavenProxy"
        }
      },
      "session_manager.SessionManager.create_session": {
        "return_type": "str",
        "param_types": {
          "user_id": "Optional[str]",
          "session_duration": "timedelta",
          "ip_address": "str",
          "user_agent": "str"
        }
      },
      "session_manager.SessionManager.create_user_session": {
        "return_type": "UserSession",
        "param_types": {
          "user_id": "str",
          "session_id": "str"
        }
      },
      "session_manager.SessionManager.get_current_session": {
        "return_type": "Optional[UserSession]",
        "param_types": {}
      },
      "session_manager.SessionManager.get_current_session_id": {
        "return_type": "Optional[str]",
        "param_types": {}
      },
      "session_manager.SessionManager.get_current_user_id": {
        "return_type": "Optional[str]",
        "param_types": {}
      },
      "session_manager.SessionManager.get_current_user": {
        "return_type": "Optional[Any]",
        "param_types": {}
      },
      "session_manager.SessionManager.get_current_timestamp": {
        "return_type": "float",
        "param_types": {}
      },
      "session_manager.SessionManager.validate_session": {
        "return_type": "bool",
        "param_types": {
          "session_id": "str"
        }
      },
      "session_manager.SessionManager.validate_room_access": {
        "return_type": "bool",
        "param_types": {
          "room_name": "str"
        }
      },
      "session_manager.SessionManager.get_user_room": {
        "return_type": "str",
        "param_types": {
          "user_id": "Optional[str]"
        }
      },
      "session_manager.SessionManager.get_user_rooms": {
        "return_type": "List[str]",
        "param_types": {
          "user_id": "str"
        }
      },
      "session_manager.SessionManager.get_active_users": {
        "return_type": "List[str]",
        "param_types": {}
      },
      "session_manager.SessionManager.cleanup_user_session": {
        "return_type": "None",
        "param_types": {
          "user_id": "str"
        }
      },
      "session_manager.SessionManager.destroy_session": {
        "return_type": "bool",
        "param_types": {
          "session_id": "str"
        }
      },
      "session_manager.SessionManager._determine_user_role": {
        "return_type": "UserRole",
        "param_types": {
          "user_id": "str"
        }
      },
      "session_manager.SessionManager._get_role_permissions": {
        "return_type": "Set[str]",
        "param_types": {
          "role": "UserRole"
        }
      },
      "session_manager.SessionManager._expire_session": {
        "return_type": "None",
        "param_types": {
          "session_id": "str"
        }
      },
      "session_manager.SessionManager._terminate_session": {
        "return_type": "None",
        "param_types": {
          "session_id": "str",
          "reason": "str"
        }
      },
      "session_manager.SessionManager._trigger_event": {
        "return_type": "None",
        "param_types": {
          "event_name": "str",
          "session": "UserSession"
        }
      },
      "session_manager.SessionManager.get_session_statistics": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "session_manager.SessionManager.session_context": {
        "return_type": null,
        "param_types": {
          "session_id": "str"
        }
      },
      "session_manager.SessionManager.add_session_event_handler": {
        "return_type": "None",
        "param_types": {
          "event_name": "str",
          "handler": "Callable"
        }
      },
      "session_manager.SessionManager.periodic_cleanup": {
        "return_type": "Dict[str, int]",
        "param_types": {}
      },
      "session_manager.initialize_session_manager": {
        "return_type": "SessionManager",
        "param_types": {
          "haven_proxy": "HavenProxy"
        }
      },
      "session_manager.get_current_session": {
        "return_type": "Optional[UserSession]",
        "param_types": {}
      },
      "session_manager.get_current_user": {
        "return_type": "Optional[Any]",
        "param_types": {}
      },
      "session_manager.get_current_user_id": {
        "return_type": "Optional[str]",
        "param_types": {}
      },
      "session_manager.SessionInteractionManager.__init__": {
        "return_type": null,
        "param_types": {
          "session_manager": "SessionManager"
        }
      },
      "session_manager.SessionInteractionManager.record_user_interaction": {
        "return_type": "None",
        "param_types": {
          "user1_id": "str",
          "user2_id": "str",
          "interaction_type": "str",
          "data": "Dict[str, Any]"
        }
      },
      "session_manager.SessionInteractionManager._get_user_session": {
        "return_type": "Optional[UserSession]",
        "param_types": {
          "user_id": "str"
        }
      },
      "session_manager.SessionAnalytics.__init__": {
        "return_type": null,
        "param_types": {
          "session_manager": "SessionManager"
        }
      },
      "session_manager.SessionAnalytics.compute_user_engagement_score": {
        "return_type": "float",
        "param_types": {
          "user_id": "str"
        }
      },
      "session_manager.SessionAnalytics._get_user_session": {
        "return_type": "Optional[UserSession]",
        "param_types": {
          "user_id": "str"
        }
      },
      "socketio_events.SocketIOEventRegistry.__init__": {
        "return_type": null,
        "param_types": {
          "socketio": "SocketIO",
          "session_manager": "SessionManager"
        }
      },
      "socketio_events.SocketIOEventRegistry.register_dynamic_event": {
        "return_type": "None",
        "param_types": {
          "event_name": "str",
          "handler": "Callable"
        }
      },
      "socketio_events.SocketIOEventRegistry.batch_register_events": {
        "return_type": "None",
        "param_types": {
          "event_configs": "List[Dict[str, Any]]"
        }
      },
      "socketio_events.SocketIOEventRegistry.create_event_handler": {
        "return_type": "Callable",
        "param_types": {
          "config": "Dict[str, Any]"
        }
      },
      "socketio_events.SocketIOEventRegistry._create_room_handler": {
        "return_type": "Callable",
        "param_types": {
          "config": "Dict[str, Any]"
        }
      },
      "socketio_events.SocketIOEventRegistry._create_broadcast_handler": {
        "return_type": "Callable",
        "param_types": {
          "config": "Dict[str, Any]"
        }
      },
      "socketio_events.register_events": {
        "return_type": "None",
        "param_types": {
          "socketio": "SocketIO",
          "haven_proxy": "HavenProxy"
        }
      },
      "socketio_events.create_dynamic_handler": {
        "return_type": "Callable",
        "param_types": {
          "event_name": "str",
          "proxy": "HavenProxy",
          "session_manager": "SessionManager"
        }
      },
      "socketio_events.emergency_broadcast": {
        "return_type": "None",
        "param_types": {
          "message": "str",
          "severity": "str"
        }
      },
      "socketio_events.admin_notification": {
        "return_type": "None",
        "param_types": {
          "admin_id": "str",
          "notification": "Dict[str, Any]"
        }
      }
    },
    "state": {
      "admin_manager.manager": {
        "type": "AdminManager",
        "inferred_from_value": true
      },
      "admin_manager.result": {
        "type": "manager.execute_operation",
        "inferred_from_value": true
      },
      "admin_manager.status": {
        "type": "manager.get_system_status",
        "inferred_from_value": true
      },
      "database_manager._connection_pool": {
        "type": "List[DatabaseConnection]",
        "inferred_from_value": false
      },
      "database_manager._pool_lock": {
        "type": "threading.Lock",
        "inferred_from_value": true
      },
      "database_manager._connection_counter": {
        "type": null,
        "inferred_from_value": false
      },
      "database_manager.conn": {
        "type": "get_db_connection",
        "inferred_from_value": true
      },
      "database_manager.tx_manager": {
        "type": "TransactionManager",
        "inferred_from_value": true
      },
      "database_manager.stats": {
        "type": "get_pool_stats",
        "inferred_from_value": true
      },
      "decorators.PERFORMANCE_METRICS": {
        "type": "Dict[str, List[float]]",
        "inferred_from_value": false
      },
      "decorators.AUTH_CACHE": {
        "type": "Dict[str, bool]",
        "inferred_from_value": false
      },
      "decorators.RATE_LIMIT_CACHE": {
        "type": "Dict[str, Dict[str, Any]]",
        "inferred_from_value": false
      },
      "decorators.TRACE_LOCK": {
        "type": "Lock",
        "inferred_from_value": true
      },
      "decorators._decorator_registry": {
        "type": "DecoratorRegistry",
        "inferred_from_value": true
      },
      "decorators.performance_monitor": {
        "type": "create_custom_decorator",
        "inferred_from_value": true
      },
      "event_validator.T": {
        "type": "TypeVar",
        "inferred_from_value": true
      },
      "event_validator.event_validator": {
        "type": "EventValidator",
        "inferred_from_value": true
      },
      "event_validator.message_validator": {
        "type": "MessageValidator",
        "inferred_from_value": true
      },
      "event_validator.test_event_data": {
        "type": null,
        "inferred_from_value": false
      },
      "event_validator.event_validation_result": {
        "type": "event_validator.validate_event",
        "inferred_from_value": true
      },
      "event_validator.message_validation_result": {
        "type": "message_validator.validate_message",
        "inferred_from_value": true
      },
      "event_validator.complete_validation": {
        "type": "validate_complete_action",
        "inferred_from_value": true
      },
      "inheritence_complex.T": {
        "type": "TypeVar",
        "inferred_from_value": true
      },
      "inheritence_complex.U": {
        "type": "TypeVar",
        "inferred_from_value": true
      },
      "inheritence_complex.ultimate_processor": {
        "type": "UltimateProcessor",
        "inferred_from_value": true
      },
      "inheritence_complex.test_data": {
        "type": null,
        "inferred_from_value": false
      },
      "inheritence_complex.result": {
        "type": "ultimate_processor.ultimate_process",
        "inferred_from_value": true
      },
      "inheritence_complex.stats": {
        "type": "ultimate_processor.get_statistics",
        "inferred_from_value": true
      },
      "inheritence_complex.cache_stats": {
        "type": "ultimate_processor.get_cache_statistics",
        "inferred_from_value": true
      },
      "inheritence_complex.metric_summary": {
        "type": "ultimate_processor.get_metric_summary",
        "inferred_from_value": true
      },
      "proxy_handler.T": {
        "type": "TypeVar",
        "inferred_from_value": true
      },
      "session_manager._global_session_manager": {
        "type": "Optional[SessionManager]",
        "inferred_from_value": false
      },
      "socketio_events._socketio_instance": {
        "type": "Optional[SocketIO]",
        "inferred_from_value": false
      },
      "socketio_events._haven_proxy": {
        "type": "Optional[HavenProxy]",
        "inferred_from_value": false
      },
      "socketio_events._session_manager": {
        "type": "Optional[SessionManager]",
        "inferred_from_value": false
      },
      "socketio_events.EVENT_HANDLERS": {
        "type": "Dict[str, Callable]",
        "inferred_from_value": false
      },
      "socketio_events.ACTIVE_ROOMS": {
        "type": "Dict[str, List[str]]",
        "inferred_from_value": false
      }
    },
    "external_classes": {
      "threading.Lock": {
        "module": "threading",
        "name": "Lock",
        "local_alias": "Lock"
      },
      "flask_socketio.SocketIO": {
        "module": "flask_socketio",
        "name": "SocketIO",
        "local_alias": "SocketIO"
      }
    },
    "external_functions": {
      "flask_socketio.emit": {
        "module": "flask_socketio",
        "name": "emit",
        "local_alias": "emit",
        "return_type": null
      },
      "flask_socketio.disconnect": {
        "module": "flask_socketio",
        "name": "disconnect",
        "local_alias": "disconnect",
        "return_type": null
      },
      "flask_socketio.join_room": {
        "module": "flask_socketio",
        "name": "join_room",
        "local_alias": "join_room",
        "return_type": null
      },
      "flask_socketio.leave_room": {
        "module": "flask_socketio",
        "name": "leave_room",
        "local_alias": "leave_room",
        "return_type": null
      }
    }
  },
  "atlas": {
    "admin_manager.py": {
      "file_path": "admin_manager.py",
      "module_docstring": "\nAdmin management module for testing complex administrative operations.\nProvides mock admin functionality for testing decorator patterns and method chaining.\n",
      "imports": {
        "Any": "typing.Any",
        "Dict": "typing.Dict",
        "List": "typing.List",
        "Optional": "typing.Optional",
        "Set": "typing.Set",
        "Union": "typing.Union",
        "dataclass": "dataclasses.dataclass",
        "field": "dataclasses.field",
        "datetime": "datetime.datetime",
        "timedelta": "datetime.timedelta",
        "Enum": "enum.Enum",
        "auto": "enum.auto",
        "logging": "logging",
        "threading": "threading",
        "uuid": "uuid"
      },
      "classes": [
        {
          "name": "OperationType",
          "docstring": "Types of administrative operations.",
          "methods": []
        },
        {
          "name": "OperationStatus",
          "docstring": "Status of administrative operations.",
          "methods": []
        },
        {
          "name": "OperationResult",
          "docstring": "Result of an administrative operation.",
          "methods": [
            {
              "name": "get_duration",
              "args": [
                "self"
              ],
              "docstring": "Get operation duration.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_error",
              "args": [
                "self",
                "error"
              ],
              "docstring": "Add an error to the operation result.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_warning",
              "args": [
                "self",
                "warning"
              ],
              "docstring": "Add a warning to the operation result.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "AdminManager",
          "docstring": "\n    Administrative operations manager for testing complex admin workflows.\n    Provides mock admin functionality with comprehensive operation tracking.\n    ",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [
                "threading.RLock",
                "admin_manager.AdminManager._initialize_system_config"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_initialize_system_config",
              "args": [
                "self"
              ],
              "docstring": "Initialize default system configuration.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "execute_operation",
              "args": [
                "self",
                "operation_type",
                "parameters"
              ],
              "docstring": "\n        Execute an administrative operation.\n        This is the main entry point called by the decorator in decorators.py.\n        ",
              "calls": [
                "uuid.uuid4",
                "admin_manager.OperationResult.add_error",
                "admin_manager.AdminManager._result_to_dict",
                "admin_manager.AdminManager._execute_specific_operation",
                "admin_manager.AdminManager._add_audit_entry"
              ],
              "instantiations": [
                "admin_manager.OperationResult"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_execute_specific_operation",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Execute the specific administrative operation based on type.",
              "calls": [
                "admin_manager.OperationResult.add_error"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_user_management",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle user management operations.",
              "calls": [
                "admin_manager.OperationResult.add_error",
                "uuid.uuid4",
                "admin_manager.OperationResult.add_warning"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_system_configuration",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle system configuration operations.",
              "calls": [
                "admin_manager.OperationResult.add_error"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_data_migration",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle data migration operations.",
              "calls": [
                "admin_manager.OperationResult.add_error"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_security_audit",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle security audit operations.",
              "calls": [
                "admin_manager.OperationResult.add_warning"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_performance_tuning",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle performance tuning operations.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_backup_restore",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle backup and restore operations.",
              "calls": [
                "uuid.uuid4",
                "admin_manager.OperationResult.add_error",
                "admin_manager.OperationResult.add_warning"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_handle_monitoring_setup",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Handle monitoring setup operations.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_result_to_dict",
              "args": [
                "self",
                "result"
              ],
              "docstring": "Convert OperationResult to dictionary for return.",
              "calls": [
                "admin_manager.OperationResult.get_duration"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_add_audit_entry",
              "args": [
                "self",
                "result",
                "parameters"
              ],
              "docstring": "Add entry to audit log.",
              "calls": [
                "admin_manager.OperationResult.get_duration"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_operation_status",
              "args": [
                "self",
                "operation_id"
              ],
              "docstring": "Get status of a specific operation.",
              "calls": [
                "admin_manager.AdminManager._result_to_dict"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_active_operations",
              "args": [
                "self"
              ],
              "docstring": "Get list of currently active operation IDs.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_system_status",
              "args": [
                "self"
              ],
              "docstring": "Get overall system status.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "cancel_operation",
              "args": [
                "self",
                "operation_id"
              ],
              "docstring": "Cancel an active operation.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [],
      "module_state": []
    },
    "database_manager.py": {
      "file_path": "database_manager.py",
      "module_docstring": "\nDatabase management module for transaction handling and connection management.\nProvides mock database functionality for testing decorator patterns.\n",
      "imports": {
        "Any": "typing.Any",
        "Optional": "typing.Optional",
        "Dict": "typing.Dict",
        "List": "typing.List",
        "contextmanager": "contextlib.contextmanager",
        "threading": "threading",
        "time": "time",
        "logging": "logging"
      },
      "classes": [
        {
          "name": "DatabaseConnection",
          "docstring": "Mock database connection for testing purposes.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "connection_id"
              ],
              "docstring": null,
              "calls": [
                "threading.RLock"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "execute",
              "args": [
                "self",
                "query",
                "params"
              ],
              "docstring": "Execute a database query.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "commit",
              "args": [
                "self"
              ],
              "docstring": "Commit current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "rollback",
              "args": [
                "self"
              ],
              "docstring": "Rollback current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "begin_transaction",
              "args": [
                "self",
                "isolation_level"
              ],
              "docstring": "Begin a new transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "close",
              "args": [
                "self"
              ],
              "docstring": "Close the database connection.",
              "calls": [
                "database_manager.DatabaseConnection.rollback"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "is_connected",
              "args": [
                "self"
              ],
              "docstring": "Check if connection is still open.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_stats",
              "args": [
                "self"
              ],
              "docstring": "Get connection statistics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "TransactionManager",
          "docstring": "Transaction manager for handling database transactions with various isolation levels.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "connection",
                "isolation_level"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "begin_transaction",
              "args": [
                "self"
              ],
              "docstring": "Begin a new database transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "commit_transaction",
              "args": [
                "self"
              ],
              "docstring": "Commit the current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "rollback_transaction",
              "args": [
                "self"
              ],
              "docstring": "Rollback the current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "close_connection",
              "args": [
                "self"
              ],
              "docstring": "Close the database connection.",
              "calls": [
                "database_manager.TransactionManager.rollback_transaction"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "execute_in_transaction",
              "args": [
                "self",
                "query",
                "params"
              ],
              "docstring": "Execute a query within the current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "transaction_context",
              "args": [
                "self"
              ],
              "docstring": "Context manager for automatic transaction handling.",
              "calls": [
                "database_manager.TransactionManager.begin_transaction",
                "database_manager.TransactionManager.commit_transaction",
                "database_manager.TransactionManager.rollback_transaction"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@contextmanager"
              ]
            },
            {
              "name": "get_transaction_info",
              "args": [
                "self"
              ],
              "docstring": "Get information about the current transaction.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_db_connection",
          "args": [],
          "docstring": "\n    Get a database connection from the pool.\n    Creates a new mock connection for testing purposes.\n    ",
          "calls": [],
          "instantiations": [
            "database_manager.DatabaseConnection"
          ],
          "accessed_state": [
            "database_manager._pool_lock",
            "database_manager._connection_counter",
            "database_manager._connection_pool"
          ],
          "decorators": []
        },
        {
          "name": "close_all_connections",
          "args": [],
          "docstring": "Close all connections in the pool.",
          "calls": [
            "database_manager.DatabaseConnection.is_connected",
            "database_manager.DatabaseConnection.close"
          ],
          "instantiations": [],
          "accessed_state": [
            "database_manager._pool_lock",
            "database_manager._connection_pool"
          ],
          "decorators": []
        },
        {
          "name": "get_pool_stats",
          "args": [],
          "docstring": "Get statistics about the connection pool.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [
            "database_manager._pool_lock",
            "database_manager._connection_pool",
            "database_manager.conn"
          ],
          "decorators": []
        },
        {
          "name": "create_transaction_manager",
          "args": [
            "isolation_level"
          ],
          "docstring": "Create a new transaction manager with a fresh connection.",
          "calls": [
            "database_manager.get_db_connection"
          ],
          "instantiations": [
            "database_manager.TransactionManager"
          ],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "database_transaction",
          "args": [
            "isolation_level"
          ],
          "docstring": "Context manager for easy transaction handling.",
          "calls": [
            "database_manager.create_transaction_manager",
            "database_manager.TransactionManager.transaction_context",
            "database_manager.TransactionManager.close_connection"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@contextmanager"
          ]
        }
      ],
      "module_state": []
    },
    "decorators.py": {
      "file_path": "decorators.py",
      "module_docstring": "\nComplex decorator patterns for stress testing decorator analysis.\nTests nested decorators, parameterized decorators, and class-based decorators.\n",
      "imports": {
        "Callable": "typing.Callable",
        "Any": "typing.Any",
        "Dict": "typing.Dict",
        "Optional": "typing.Optional",
        "Union": "typing.Union",
        "Type": "typing.Type",
        "List": "typing.List",
        "wraps": "functools.wraps",
        "partial": "functools.partial",
        "time": "time",
        "logging": "logging",
        "Lock": "threading.Lock",
        "defaultdict": "collections.defaultdict",
        "inspect": "inspect",
        "get_db_connection": "database_manager.get_db_connection",
        "TransactionManager": "database_manager.TransactionManager",
        "AdminManager": "admin_manager.AdminManager",
        "get_current_session": "session_manager.get_current_session",
        "get_current_user": "session_manager.get_current_user",
        "get_current_user_id": "session_manager.get_current_user_id"
      },
      "classes": [
        {
          "name": "DecoratorRegistry",
          "docstring": "Registry for managing complex decorator patterns.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "register_decorator",
              "args": [
                "self",
                "name",
                "decorator"
              ],
              "docstring": "Register a decorator for dynamic application.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_decorator_chain",
              "args": [
                "self",
                "func_name"
              ],
              "docstring": "Get the decorator chain for a function.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "ClassBasedDecorator",
          "docstring": "\n    Class-based decorator for testing complex decorator analysis.\n    ",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "config"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "__call__",
              "args": [
                "self",
                "func"
              ],
              "docstring": null,
              "calls": [
                "decorators.ClassBasedDecorator._validate_arguments",
                "decorators.ClassBasedDecorator._transform_result"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_arguments",
              "args": [
                "self",
                "func",
                "args",
                "kwargs"
              ],
              "docstring": "Validate function arguments.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_transform_result",
              "args": [
                "self",
                "result"
              ],
              "docstring": "Transform function result.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "PropertyDecorator",
          "docstring": "\n    Custom property decorator with validation and transformation.\n    ",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "validator",
                "transformer",
                "cache"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "__call__",
              "args": [
                "self",
                "func"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [
            "decorators.TRACE_LOCK",
            "decorators._decorator_registry",
            "decorators.PERFORMANCE_METRICS"
          ],
          "decorators": [
            "@wraps(f)"
          ]
        },
        {
          "name": "trace",
          "args": [
            "func"
          ],
          "docstring": "\n    Advanced tracing decorator with optional parameters.\n    Tests parameterized decorator analysis.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [
            "decorators._decorator_registry"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [
            "decorators.PERFORMANCE_METRICS"
          ],
          "decorators": [
            "@wraps(f)"
          ]
        },
        {
          "name": "monitor_performance",
          "args": [
            "func"
          ],
          "docstring": "\n    Performance monitoring decorator with complex callback patterns.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [
            "session_manager.get_current_session",
            "session_manager.UserSession.is_valid",
            "session_manager.get_current_user"
          ],
          "instantiations": [],
          "accessed_state": [
            "decorators.AUTH_CACHE"
          ],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "validate_auth",
          "args": [
            "required_role",
            "check_session"
          ],
          "docstring": "\n    Authentication validation decorator with complex role checking.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [
            "session_manager.get_current_user_id"
          ],
          "instantiations": [],
          "accessed_state": [
            "decorators.RATE_LIMIT_CACHE"
          ],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "rate_limit",
          "args": [
            "calls",
            "period",
            "per_user",
            "key_func"
          ],
          "docstring": "\n    Rate limiting decorator with complex key generation and user tracking.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "create_custom_decorator",
          "args": [
            "name",
            "pre_hook",
            "post_hook",
            "error_hook"
          ],
          "docstring": "\n    Factory for creating custom decorators with hooks.\n    Tests complex decorator factory patterns.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [
            "decorators._decorator_registry"
          ],
          "decorators": []
        },
        {
          "name": "multi_decorator",
          "args": [],
          "docstring": "\n    Apply multiple decorators in sequence.\n    Tests complex decorator chaining analysis.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "conditional_decorator",
          "args": [
            "condition",
            "decorator"
          ],
          "docstring": "\n    Apply decorator only if condition is met.\n    Tests conditional decorator application.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "advanced_cache",
          "args": [
            "ttl",
            "key_func",
            "serializer",
            "validator"
          ],
          "docstring": "\n    Advanced caching decorator with complex parameter patterns.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "create_monitoring_decorator",
          "args": [
            "metrics_collector"
          ],
          "docstring": "\n    Create a monitoring decorator that uses an external metrics collector.\n    Tests decorator factories with external dependencies.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "calls": [
            "database_manager.get_db_connection",
            "database_manager.TransactionManager.begin_transaction",
            "database_manager.TransactionManager.commit_transaction",
            "database_manager.TransactionManager.rollback_transaction",
            "database_manager.TransactionManager.close_connection"
          ],
          "instantiations": [
            "database_manager.TransactionManager"
          ],
          "accessed_state": [],
          "decorators": [
            "@wraps(func)"
          ]
        },
        {
          "name": "transaction_decorator",
          "args": [
            "isolation_level",
            "rollback_on"
          ],
          "docstring": "\n    Database transaction decorator with complex exception handling.\n    ",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "complex_calculation",
          "args": [
            "data",
            "multiplier"
          ],
          "docstring": "Function with multiple decorators for testing decorator chain analysis.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@trace(level='DEBUG', include_args=True, include_result=True)",
            "@monitor_performance(threshold_ms=500.0)"
          ]
        },
        {
          "name": "admin_operation",
          "args": [
            "operation_type",
            "parameters"
          ],
          "docstring": "Admin operation with complex decorator stack.",
          "calls": [
            "admin_manager.AdminManager.execute_operation"
          ],
          "instantiations": [
            "admin_manager.AdminManager"
          ],
          "accessed_state": [],
          "decorators": [
            "@validate_auth(required_role='admin')",
            "@rate_limit(calls=5, period=300)",
            "@ClassBasedDecorator({'log_calls': True, 'validate_args': True, 'transform_result': True})"
          ]
        },
        {
          "name": "cached_expensive_operation",
          "args": [
            "input_data"
          ],
          "docstring": "Function using factory-created and parameterized decorators.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@performance_monitor",
            "@advanced_cache(ttl=600, key_func=lambda x: f'cache_{hash(str(x))}')"
          ]
        },
        {
          "name": "debug_function",
          "args": [],
          "docstring": "Function with conditional decorator application.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@conditional_decorator(condition=lambda func: func.__name__.startswith('debug_'), decorator=trace(level='DEBUG'))"
          ]
        },
        {
          "name": "multi_decorated_function",
          "args": [
            "param"
          ],
          "docstring": "Function with multiple decorators applied via multi_decorator.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": [
            "@multi_decorator(trace(), monitor_performance(), rate_limit(calls=10, period=60))"
          ]
        }
      ],
      "module_state": [
        {
          "name": "PERFORMANCE_METRICS",
          "value": "defaultdict(list)"
        },
        {
          "name": "AUTH_CACHE",
          "value": "{}"
        },
        {
          "name": "RATE_LIMIT_CACHE",
          "value": "defaultdict(dict)"
        },
        {
          "name": "TRACE_LOCK",
          "value": "Lock()"
        }
      ]
    },
    "event_validator.py": {
      "file_path": "event_validator.py",
      "module_docstring": "\nAdvanced validation patterns with complex rule engines and chaining.\nTests complex validation logic with method chaining and factory patterns.\n",
      "imports": {
        "Any": "typing.Any",
        "Dict": "typing.Dict",
        "List": "typing.List",
        "Optional": "typing.Optional",
        "Callable": "typing.Callable",
        "Union": "typing.Union",
        "Protocol": "typing.Protocol",
        "TypeVar": "typing.TypeVar",
        "ABC": "abc.ABC",
        "abstractmethod": "abc.abstractmethod",
        "dataclass": "dataclasses.dataclass",
        "field": "dataclasses.field",
        "Enum": "enum.Enum",
        "auto": "enum.auto",
        "re": "re",
        "time": "time",
        "wraps": "functools.wraps",
        "trace": "decorators.trace",
        "monitor_performance": "decorators.monitor_performance",
        "validate_auth": "decorators.validate_auth"
      },
      "classes": [
        {
          "name": "ValidationLevel",
          "docstring": "Validation severity levels.",
          "methods": []
        },
        {
          "name": "ValidationResult",
          "docstring": "Validation result types.",
          "methods": []
        },
        {
          "name": "ValidationError",
          "docstring": "Validation error details.",
          "methods": []
        },
        {
          "name": "ValidationReport",
          "docstring": "Comprehensive validation report.",
          "methods": [
            {
              "name": "is_valid",
              "args": [
                "self"
              ],
              "docstring": "Check if validation passed.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "has_errors",
              "args": [
                "self"
              ],
              "docstring": "Check if there are validation errors.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "has_warnings",
              "args": [
                "self"
              ],
              "docstring": "Check if there are validation warnings.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_error_codes",
              "args": [
                "self"
              ],
              "docstring": "Get list of error codes.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_error",
              "args": [
                "self",
                "field",
                "message",
                "code",
                "level",
                "context",
                "suggestions"
              ],
              "docstring": "Add validation error.",
              "calls": [],
              "instantiations": [
                "event_validator.ValidationError"
              ],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "ValidationRule",
          "docstring": "Protocol for validation rules.",
          "methods": [
            {
              "name": "validate",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Validate data and return report.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_rule_name",
              "args": [
                "self"
              ],
              "docstring": "Get rule name.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "BaseValidationRule",
          "docstring": "Abstract base class for validation rules.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "rule_name",
                "description"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_implementation",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Implementation-specific validation logic.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@abstractmethod"
              ]
            },
            {
              "name": "validate",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Main validation method with error handling.",
              "calls": [
                "event_validator.BaseValidationRule._validate_implementation",
                "event_validator.ValidationReport.add_error"
              ],
              "instantiations": [
                "event_validator.ValidationReport"
              ],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "get_rule_name",
              "args": [
                "self"
              ],
              "docstring": "Get rule name.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "RequiredFieldRule",
          "docstring": "Rule for validating required fields.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "required_fields"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_implementation",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Validate required fields.",
              "calls": [
                "event_validator.ValidationReport.add_error"
              ],
              "instantiations": [
                "event_validator.ValidationReport"
              ],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "DataTypeRule",
          "docstring": "Rule for validating data types.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "field_types"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_implementation",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Validate data types.",
              "calls": [
                "event_validator.ValidationReport.add_error"
              ],
              "instantiations": [
                "event_validator.ValidationReport"
              ],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "RegexValidationRule",
          "docstring": "Rule for regex pattern validation.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "field_patterns"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_implementation",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Validate regex patterns.",
              "calls": [
                "event_validator.ValidationReport.add_error"
              ],
              "instantiations": [
                "event_validator.ValidationReport"
              ],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "ValidationEngine",
          "docstring": "Comprehensive validation engine with rule management.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_rule",
              "args": [
                "self",
                "rule"
              ],
              "docstring": "Add validation rule to engine.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "add_rules",
              "args": [
                "self",
                "rules"
              ],
              "docstring": "Add multiple validation rules.",
              "calls": [
                "event_validator.ValidationEngine.add_rule"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "set_global_context",
              "args": [
                "self",
                "context"
              ],
              "docstring": "Set global context for all validations.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Comprehensive validation using all rules.",
              "calls": [
                "event_validator.ValidationEngine._generate_cache_key",
                "event_validator.BaseValidationRule.validate",
                "event_validator.ValidationEngine._merge_reports"
              ],
              "instantiations": [
                "event_validator.ValidationReport"
              ],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ]
            },
            {
              "name": "_generate_cache_key",
              "args": [
                "self",
                "data",
                "context"
              ],
              "docstring": "Generate cache key for validation.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_merge_reports",
              "args": [
                "self",
                "main_report",
                "rule_report"
              ],
              "docstring": "Merge rule report into main report.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "create_rule_builder",
              "args": [
                "self"
              ],
              "docstring": "Create a rule builder for fluent rule creation.",
              "calls": [],
              "instantiations": [
                "event_validator.ValidationRuleBuilder"
              ],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "ValidationRuleBuilder",
          "docstring": "Fluent builder for creating validation rules.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "engine"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "require_fields",
              "args": [
                "self"
              ],
              "docstring": "Add required field validation.",
              "calls": [],
              "instantiations": [
                "event_validator.RequiredFieldRule"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "field_types",
              "args": [
                "self"
              ],
              "docstring": "Add field type validation.",
              "calls": [],
              "instantiations": [
                "event_validator.DataTypeRule"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "field_patterns",
              "args": [
                "self"
              ],
              "docstring": "Add regex pattern validation.",
              "calls": [],
              "instantiations": [
                "event_validator.RegexValidationRule"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "build",
              "args": [
                "self"
              ],
              "docstring": "Build and add rules to engine.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "EventValidator",
          "docstring": "Specialized validator for event data with complex patterns.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [
                "event_validator.EventValidator._setup_default_validations"
              ],
              "instantiations": [
                "event_validator.ValidationEngine"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_setup_default_validations",
              "args": [
                "self"
              ],
              "docstring": "Setup default event validation rules.",
              "calls": [
                "event_validator.ValidationEngine.create_rule_builder"
              ],
              "instantiations": [
                "event_validator.ValidationEngine"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_event",
              "args": [
                "self",
                "event_data"
              ],
              "docstring": "Validate event data with type-specific rules.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "validate_result",
              "args": [
                "self",
                "result"
              ],
              "docstring": "Simple result validation.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_validation_details",
              "args": [
                "self"
              ],
              "docstring": "Get validation details.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "MessageValidator",
          "docstring": "Specialized validator for message content with advanced filtering.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [
                "event_validator.MessageValidator._setup_default_filters"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_setup_default_filters",
              "args": [
                "self"
              ],
              "docstring": "Setup default message content filters.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_message",
              "args": [
                "self",
                "message"
              ],
              "docstring": "Validate message content with comprehensive filtering.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "get_validation_details",
              "args": [
                "self"
              ],
              "docstring": "Get detailed validation information.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "validate_complete_action",
          "args": [
            "event_data",
            "message_content"
          ],
          "docstring": "Complete validation chain for actions.",
          "calls": [
            "event_validator.EventValidator.validate_event",
            "event_validator.MessageValidator.validate_message"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "T",
          "value": "TypeVar('T')"
        }
      ]
    },
    "inheritence_complex.py": {
      "file_path": "inheritence_complex.py",
      "module_docstring": "\nComplex inheritance patterns for stress testing inheritance-aware method resolution.\nTests multiple inheritance, mixin patterns, abstract base classes, and method resolution order.\n",
      "imports": {
        "Any": "typing.Any",
        "Dict": "typing.Dict",
        "List": "typing.List",
        "Optional": "typing.Optional",
        "Union": "typing.Union",
        "Protocol": "typing.Protocol",
        "TypeVar": "typing.TypeVar",
        "Generic": "typing.Generic",
        "ABC": "abc.ABC",
        "abstractmethod": "abc.abstractmethod",
        "asyncio": "asyncio",
        "dataclass": "dataclasses.dataclass",
        "field": "dataclasses.field",
        "Enum": "enum.Enum",
        "auto": "enum.auto",
        "contextmanager": "contextlib.contextmanager",
        "trace": "decorators.trace",
        "monitor_performance": "decorators.monitor_performance",
        "validate_auth": "decorators.validate_auth",
        "BaseProxy": "proxy_handler.BaseProxy",
        "DataProxy": "proxy_handler.DataProxy",
        "SessionManager": "session_manager.SessionManager",
        "time": "time"
      },
      "classes": [
        {
          "name": "Priority",
          "docstring": "Priority levels for task processing.",
          "methods": []
        },
        {
          "name": "ProcessingResult",
          "docstring": "Result container for processing operations.",
          "methods": []
        },
        {
          "name": "AbstractProcessor",
          "docstring": "Abstract base processor with required methods.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "process_data",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Abstract method that must be implemented by subclasses.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@abstractmethod"
              ]
            },
            {
              "name": "validate_input",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Abstract validation method.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@abstractmethod"
              ]
            },
            {
              "name": "get_statistics",
              "args": [
                "self"
              ],
              "docstring": "Concrete method available to all subclasses.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "log_operation",
              "args": [
                "self",
                "operation",
                "details"
              ],
              "docstring": "Logging method with decorator.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            }
          ]
        },
        {
          "name": "AsyncProcessor",
          "docstring": "Async processing capabilities mixin.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "queue_for_async_processing",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Queue data for async processing.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "CacheableMixin",
          "docstring": "Mixin providing caching capabilities.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_cache_key",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Generate cache key for data.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_from_cache",
              "args": [
                "self",
                "cache_key"
              ],
              "docstring": "Retrieve item from cache.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "store_in_cache",
              "args": [
                "self",
                "cache_key",
                "data"
              ],
              "docstring": "Store item in cache.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_cache_statistics",
              "args": [
                "self"
              ],
              "docstring": "Get cache performance statistics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "ValidatedMixin",
          "docstring": "Mixin providing advanced validation capabilities.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_validation_rule",
              "args": [
                "self",
                "rule",
                "description"
              ],
              "docstring": "Add a validation rule.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "comprehensive_validate",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Run comprehensive validation using all rules.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            }
          ]
        },
        {
          "name": "MetricsMixin",
          "docstring": "Mixin providing metrics collection.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "record_metric",
              "args": [
                "self",
                "metric_name",
                "value"
              ],
              "docstring": "Record a custom metric.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "add_metric_callback",
              "args": [
                "self",
                "metric_name",
                "callback"
              ],
              "docstring": "Add callback for metric updates.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_metric_summary",
              "args": [
                "self",
                "metric_name"
              ],
              "docstring": "Get summary statistics for a metric.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "BasicDataProcessor",
          "docstring": "Basic data processor combining async, cache, and validation capabilities.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id",
                "enable_cache"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_input",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Implementation of abstract method with enhanced validation.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "process_data",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Implementation of abstract method with caching.",
              "calls": [
                "inheritence_complex.BasicDataProcessor.validate_input",
                "inheritence_complex.BasicDataProcessor._internal_process"
              ],
              "instantiations": [
                "inheritence_complex.ProcessingResult"
              ],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ]
            },
            {
              "name": "_internal_process",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Internal processing logic.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "AdvancedProcessor",
          "docstring": "Advanced processor with metrics collection.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id",
                "priority"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "process_data",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Enhanced processing with metrics collection.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [
                "inheritence_complex.result"
              ],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "_processing_time_callback",
              "args": [
                "self",
                "metric_name",
                "value",
                "history"
              ],
              "docstring": "Callback for processing time metrics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_data_size_callback",
              "args": [
                "self",
                "metric_name",
                "value",
                "history"
              ],
              "docstring": "Callback for data size metrics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "change_processing_strategy",
              "args": [
                "self",
                "new_strategy"
              ],
              "docstring": "Change processing strategy (requires authorization).",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@validate_auth(required_role='operator')"
              ]
            }
          ]
        },
        {
          "name": "SpecializedProcessor",
          "docstring": "Specialized processor with domain-specific logic.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id",
                "specialization"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_validate_specialization",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Specialized validation based on processor type.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_internal_process",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Specialized processing logic.",
              "calls": [
                "inheritence_complex.SpecializedProcessor._process_numeric",
                "inheritence_complex.SpecializedProcessor._process_text",
                "inheritence_complex.SpecializedProcessor._process_structured"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "_process_numeric",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Numeric data processing.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_process_text",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Text data processing.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_process_structured",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Structured data processing.",
              "calls": [
                "inheritence_complex.SpecializedProcessor._process_structured"
              ],
              "instantiations": [],
              "accessed_state": [
                "inheritence_complex.result"
              ],
              "decorators": []
            }
          ]
        },
        {
          "name": "ProcessorProtocol",
          "docstring": "Protocol defining processor interface.",
          "methods": [
            {
              "name": "process_data",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Process data and return result.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_statistics",
              "args": [
                "self"
              ],
              "docstring": "Get processor statistics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "GenericProcessor",
          "docstring": "Generic processor for testing generic type inheritance.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "input_type",
                "output_type"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "process_typed_data",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Process data with type conversion.",
              "calls": [
                "inheritence_complex.GenericProcessor._create_type_converter"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_create_type_converter",
              "args": [
                "self",
                "from_type",
                "to_type"
              ],
              "docstring": "Create type converter function.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "UltimateProcessor",
          "docstring": "Ultimate processor combining all inheritance patterns.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "processor_id"
              ],
              "docstring": null,
              "calls": [
                "inheritence_complex.SpecializedProcessor.__init__",
                "inheritence_complex.GenericProcessor.__init__"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "ultimate_process",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Ultimate processing method combining all capabilities.",
              "calls": [
                "inheritence_complex.UltimateProcessor._apply_ultimate_enhancements"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance",
                "@validate_auth(required_role='admin')"
              ]
            },
            {
              "name": "_apply_ultimate_enhancements",
              "args": [
                "self",
                "data"
              ],
              "docstring": "Apply ultimate-level enhancements.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "ultimate_processing_context",
              "args": [
                "self"
              ],
              "docstring": "Context manager for ultimate processing.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@contextmanager"
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "create_processor_hierarchy",
          "args": [
            "processor_configs"
          ],
          "docstring": "Factory function creating complex processor hierarchies.",
          "calls": [],
          "instantiations": [
            "inheritence_complex.BasicDataProcessor",
            "inheritence_complex.AdvancedProcessor",
            "inheritence_complex.SpecializedProcessor",
            "inheritence_complex.UltimateProcessor"
          ],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "T",
          "value": "TypeVar('T')"
        },
        {
          "name": "U",
          "value": "TypeVar('U')"
        }
      ]
    },
    "proxy_handler.py": {
      "file_path": "proxy_handler.py",
      "module_docstring": "\nComplex proxy handler patterns for testing advanced method resolution and chaining.\nTests proxy patterns, delegation, and complex object relationships.\n",
      "imports": {
        "Any": "typing.Any",
        "Dict": "typing.Dict",
        "List": "typing.List",
        "Optional": "typing.Optional",
        "Callable": "typing.Callable",
        "Union": "typing.Union",
        "TypeVar": "typing.TypeVar",
        "Generic": "typing.Generic",
        "Set": "typing.Set",
        "ABC": "abc.ABC",
        "abstractmethod": "abc.abstractmethod",
        "wraps": "functools.wraps",
        "threading": "threading",
        "time": "time",
        "dataclass": "dataclasses.dataclass",
        "contextmanager": "contextlib.contextmanager",
        "trace": "decorators.trace",
        "monitor_performance": "decorators.monitor_performance",
        "validate_auth": "decorators.validate_auth",
        "rate_limit": "decorators.rate_limit"
      },
      "classes": [
        {
          "name": "ProxyConfig",
          "docstring": "Configuration for proxy behavior.",
          "methods": []
        },
        {
          "name": "ProxyMetrics",
          "docstring": "Metrics collection for proxy operations.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "record_call",
              "args": [
                "self",
                "execution_time",
                "success",
                "cache_hit"
              ],
              "docstring": "Record proxy method call metrics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_success_rate",
              "args": [
                "self"
              ],
              "docstring": "Calculate success rate.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_cache_hit_rate",
              "args": [
                "self"
              ],
              "docstring": "Calculate cache hit rate.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "BaseProxy",
          "docstring": "Abstract base proxy with core functionality.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "target",
                "config"
              ],
              "docstring": null,
              "calls": [
                "threading.RLock"
              ],
              "instantiations": [
                "proxy_handler.ProxyConfig",
                "proxy_handler.ProxyMetrics"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_proxy_method_call",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Abstract method for proxying method calls.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@abstractmethod"
              ]
            },
            {
              "name": "__getattr__",
              "args": [
                "self",
                "name"
              ],
              "docstring": "Dynamic attribute access with proxy behavior.",
              "calls": [
                "proxy_handler.BaseProxy._create_proxy_method"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "_create_proxy_method",
              "args": [
                "self",
                "method_name",
                "original_method"
              ],
              "docstring": "Create a proxy wrapper for a method.",
              "calls": [
                "proxy_handler.BaseProxy._proxy_method_call"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_execute_with_circuit_breaker",
              "args": [
                "self",
                "method_name",
                "method"
              ],
              "docstring": "Execute method with circuit breaker pattern.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ]
            },
            {
              "name": "_get_cache_key",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Generate cache key for method call.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_metrics_context",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Context manager for metrics collection.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@contextmanager"
              ]
            }
          ]
        },
        {
          "name": "DataProxy",
          "docstring": "Proxy for data access with caching and validation.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "data_source",
                "config"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_proxy_method_call",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Proxy data access method calls with caching and validation.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            }
          ]
        },
        {
          "name": "HavenProxy",
          "docstring": "Haven-specific proxy for testing complex interactions.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "target",
                "config"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_user_credentials",
              "args": [
                "self",
                "auth_data"
              ],
              "docstring": "Validate user credentials.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_user_preferences",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get user preferences.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_room_access",
              "args": [
                "self",
                "user_id",
                "room_name"
              ],
              "docstring": "Validate room access permissions.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_user_info",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get user information.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_admin_role",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Check if user has admin role.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_moderator_role",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Check if user has moderator role.",
              "calls": [
                "proxy_handler.HavenProxy.validate_admin_role"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_runner_capabilities",
              "args": [
                "self"
              ],
              "docstring": "Get runner capabilities.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_guest_limitations",
              "args": [
                "self"
              ],
              "docstring": "Get guest limitations.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_message_content",
              "args": [
                "self",
                "message",
                "user_id"
              ],
              "docstring": "Validate message content.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "log_room_message",
              "args": [
                "self",
                "room",
                "user_id",
                "message"
              ],
              "docstring": "Log room message.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_direct_message_permission",
              "args": [
                "self",
                "sender_id",
                "recipient_id"
              ],
              "docstring": "Validate direct message permissions.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_broadcast_permission",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Validate broadcast permissions.",
              "calls": [
                "proxy_handler.HavenProxy.validate_admin_role"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_room_statistics",
              "args": [
                "self",
                "room_name"
              ],
              "docstring": "Get room statistics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_event_data",
              "args": [
                "self",
                "event_name",
                "data",
                "user_id"
              ],
              "docstring": "Validate event data.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "process_event",
              "args": [
                "self",
                "event_name",
                "data",
                "user_id"
              ],
              "docstring": "Process event.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "user_exists",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Check if user exists.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_proxy_method_call",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Implementation of abstract proxy method.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "UserProxy",
          "docstring": "User-specific proxy for testing user interactions.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "user_data",
                "config"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "has_role",
              "args": [
                "self",
                "role"
              ],
              "docstring": "Check if user has specified role.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "id",
              "args": [
                "self"
              ],
              "docstring": "Get user ID.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@property"
              ]
            },
            {
              "name": "_proxy_method_call",
              "args": [
                "self",
                "method_name"
              ],
              "docstring": "Implementation of abstract proxy method.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [],
      "module_state": [
        {
          "name": "T",
          "value": "TypeVar('T')"
        }
      ]
    },
    "session_manager.py": {
      "file_path": "session_manager.py",
      "module_docstring": "\nSession management system with complex state tracking and method chaining patterns.\nTests complex object relationships and cross-module dependencies.\n",
      "imports": {
        "Dict": "typing.Dict",
        "List": "typing.List",
        "Optional": "typing.Optional",
        "Any": "typing.Any",
        "Callable": "typing.Callable",
        "Set": "typing.Set",
        "Union": "typing.Union",
        "dataclass": "dataclasses.dataclass",
        "field": "dataclasses.field",
        "datetime": "datetime.datetime",
        "timedelta": "datetime.timedelta",
        "uuid": "uuid",
        "threading": "threading",
        "contextmanager": "contextlib.contextmanager",
        "Enum": "enum.Enum",
        "auto": "enum.auto",
        "trace": "decorators.trace",
        "monitor_performance": "decorators.monitor_performance",
        "validate_auth": "decorators.validate_auth",
        "rate_limit": "decorators.rate_limit",
        "HavenProxy": "proxy_handler.HavenProxy",
        "UserProxy": "proxy_handler.UserProxy",
        "DataProxy": "proxy_handler.DataProxy",
        "time": "time"
      },
      "classes": [
        {
          "name": "SessionState",
          "docstring": "Session state enumeration.",
          "methods": []
        },
        {
          "name": "UserRole",
          "docstring": "User role enumeration.",
          "methods": []
        },
        {
          "name": "SessionMetrics",
          "docstring": "Session metrics container.",
          "methods": []
        },
        {
          "name": "UserSession",
          "docstring": "User session data container with complex relationships.",
          "methods": [
            {
              "name": "is_valid",
              "args": [
                "self"
              ],
              "docstring": "Check if session is valid.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "is_expired",
              "args": [
                "self"
              ],
              "docstring": "Check if session is expired.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "time_until_expiry",
              "args": [
                "self"
              ],
              "docstring": "Get time until session expires.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "update_activity",
              "args": [
                "self"
              ],
              "docstring": "Update last activity timestamp.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "SessionManager",
          "docstring": "Comprehensive session management with complex state tracking.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "haven_proxy"
              ],
              "docstring": null,
              "calls": [
                "threading.RLock"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "create_session",
              "args": [
                "self",
                "user_id",
                "session_duration",
                "ip_address",
                "user_agent"
              ],
              "docstring": "Create new session with comprehensive setup.",
              "calls": [
                "uuid.uuid4",
                "session_manager.SessionManager._determine_user_role",
                "session_manager.SessionManager._get_role_permissions",
                "session_manager.SessionManager._terminate_session",
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [
                "session_manager.UserSession"
              ],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "create_user_session",
              "args": [
                "self",
                "user_id",
                "session_id"
              ],
              "docstring": "Create authenticated user session with validation.",
              "calls": [
                "session_manager.SessionManager._determine_user_role",
                "session_manager.SessionManager._get_role_permissions",
                "session_manager.UserSession.update_activity",
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ]
            },
            {
              "name": "get_current_session",
              "args": [
                "self"
              ],
              "docstring": "Get current active session.",
              "calls": [
                "session_manager.UserSession.is_valid",
                "session_manager.UserSession.update_activity",
                "session_manager.SessionManager._trigger_event",
                "session_manager.UserSession.is_expired",
                "session_manager.SessionManager._expire_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "get_current_session_id",
              "args": [
                "self"
              ],
              "docstring": "Get current session ID.",
              "calls": [
                "session_manager.SessionManager.get_current_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_current_user_id",
              "args": [
                "self"
              ],
              "docstring": "Get current user ID.",
              "calls": [
                "session_manager.SessionManager.get_current_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_current_user",
              "args": [
                "self"
              ],
              "docstring": "Get current user object.",
              "calls": [
                "session_manager.SessionManager.get_current_user_id"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_current_timestamp",
              "args": [
                "self"
              ],
              "docstring": "Get current timestamp.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "validate_session",
              "args": [
                "self",
                "session_id"
              ],
              "docstring": "Validate session and update activity.",
              "calls": [
                "session_manager.UserSession.is_expired",
                "session_manager.SessionManager._expire_session",
                "session_manager.UserSession.is_valid",
                "session_manager.UserSession.update_activity",
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "validate_room_access",
              "args": [
                "self",
                "room_name"
              ],
              "docstring": "Validate room access for current user.",
              "calls": [
                "session_manager.SessionManager.get_current_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@validate_auth(required_role='user')"
              ]
            },
            {
              "name": "get_user_room",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get user-specific room name.",
              "calls": [
                "session_manager.SessionManager.get_current_user_id"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_user_rooms",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get all rooms for a user.",
              "calls": [
                "session_manager.SessionManager.get_user_room"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_active_users",
              "args": [
                "self"
              ],
              "docstring": "Get list of active user IDs.",
              "calls": [
                "session_manager.UserSession.is_valid"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "cleanup_user_session",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Cleanup all sessions for a user.",
              "calls": [
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "destroy_session",
              "args": [
                "self",
                "session_id"
              ],
              "docstring": "Destroy a specific session.",
              "calls": [
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "_determine_user_role",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Determine user role based on user ID.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_get_role_permissions",
              "args": [
                "self",
                "role"
              ],
              "docstring": "Get permissions for a user role.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_expire_session",
              "args": [
                "self",
                "session_id"
              ],
              "docstring": "Mark session as expired.",
              "calls": [
                "session_manager.SessionManager._trigger_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_terminate_session",
              "args": [
                "self",
                "session_id",
                "reason"
              ],
              "docstring": "Terminate session with reason.",
              "calls": [
                "session_manager.SessionManager._trigger_event",
                "session_manager.SessionManager.destroy_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "_trigger_event",
              "args": [
                "self",
                "event_name",
                "session"
              ],
              "docstring": "Trigger session event handlers.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "get_session_statistics",
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive session statistics.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@rate_limit(calls=100, period=60)"
              ]
            },
            {
              "name": "session_context",
              "args": [
                "self",
                "session_id"
              ],
              "docstring": "Context manager for session operations.",
              "calls": [
                "session_manager.SessionManager.get_current_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@contextmanager"
              ]
            },
            {
              "name": "add_session_event_handler",
              "args": [
                "self",
                "event_name",
                "handler"
              ],
              "docstring": "Add event handler for session events.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "periodic_cleanup",
              "args": [
                "self"
              ],
              "docstring": "Perform periodic cleanup of expired sessions.",
              "calls": [
                "session_manager.UserSession.is_expired",
                "session_manager.SessionManager._expire_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@monitor_performance"
              ]
            }
          ]
        },
        {
          "name": "SessionInteractionManager",
          "docstring": "Manages complex session interactions and cross-references.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_manager"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [
                "session_manager.SessionAnalytics"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "record_user_interaction",
              "args": [
                "self",
                "user1_id",
                "user2_id",
                "interaction_type",
                "data"
              ],
              "docstring": "Record interaction between users.",
              "calls": [
                "session_manager.SessionInteractionManager._get_user_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace"
              ]
            },
            {
              "name": "_get_user_session",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get active session for user.",
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        },
        {
          "name": "SessionAnalytics",
          "docstring": "Advanced session analytics with complex computations.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_manager"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "compute_user_engagement_score",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Compute complex user engagement score.",
              "calls": [
                "session_manager.SessionAnalytics._get_user_session"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ]
            },
            {
              "name": "_get_user_session",
              "args": [
                "self",
                "user_id"
              ],
              "docstring": "Get active session for analytics.",
              "calls": [
                "session_manager.UserSession.is_valid"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "initialize_session_manager",
          "args": [
            "haven_proxy"
          ],
          "docstring": "Initialize global session manager.",
          "calls": [],
          "instantiations": [
            "session_manager.SessionManager"
          ],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "get_current_session",
          "args": [],
          "docstring": "Get current session from global manager.",
          "calls": [
            "session_manager.SessionManager.get_current_session"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "get_current_user",
          "args": [],
          "docstring": "Get current user from global manager.",
          "calls": [
            "session_manager.SessionManager.get_current_user"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "get_current_user_id",
          "args": [],
          "docstring": "Get current user ID from global manager.",
          "calls": [
            "session_manager.SessionManager.get_current_user_id"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "socketio_events.py": {
      "file_path": "socketio_events.py",
      "module_docstring": "\nSocketIO event handling with complex decorator patterns and dynamic event registration.\nUltimate stress test for SocketIO.on() and SocketIO.emit() analysis.\n",
      "imports": {
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "Optional": "typing.Optional",
        "Callable": "typing.Callable",
        "List": "typing.List",
        "Union": "typing.Union",
        "wraps": "functools.wraps",
        "logging": "logging",
        "SocketIO": "flask_socketio.SocketIO",
        "emit": "flask_socketio.emit",
        "disconnect": "flask_socketio.disconnect",
        "join_room": "flask_socketio.join_room",
        "leave_room": "flask_socketio.leave_room",
        "trace": "decorators.trace",
        "monitor_performance": "decorators.monitor_performance",
        "validate_auth": "decorators.validate_auth",
        "rate_limit": "decorators.rate_limit",
        "SessionManager": "session_manager.SessionManager",
        "UserSession": "session_manager.UserSession",
        "HavenProxy": "proxy_handler.HavenProxy",
        "DataProxy": "proxy_handler.DataProxy",
        "EventValidator": "event_validator.EventValidator",
        "MessageValidator": "event_validator.MessageValidator"
      },
      "classes": [
        {
          "name": "SocketIOEventRegistry",
          "docstring": "Registry for dynamic SocketIO event management with complex patterns.",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "socketio",
                "session_manager"
              ],
              "docstring": null,
              "calls": [],
              "instantiations": [
                "event_validator.EventValidator",
                "event_validator.MessageValidator"
              ],
              "accessed_state": [],
              "decorators": []
            },
            {
              "name": "register_dynamic_event",
              "args": [
                "self",
                "event_name",
                "handler"
              ],
              "docstring": "Register event handler dynamically with full decorator chain.",
              "calls": [
                "socketio_events.SocketIOEventRegistry.socketio.emit::event_received",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_timestamp::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_session_id::unknown_event",
                "socketio_events.SocketIOEventRegistry.event_validator.validate_result::$result",
                "socketio_events.SocketIOEventRegistry.socketio.emit::${event_name}_success",
                "socketio_events.SocketIOEventRegistry.event_validator.get_validation_details::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_user_room::unknown_event"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [
                "@trace",
                "@monitor_performance"
              ],
              "emit_contexts": {
                "socketio_events.SocketIOEventRegistry.socketio.emit::event_received_context": {
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.SocketIOEventRegistry.socketio.emit::${event_name}_success_context": {
                  "room": "dynamic_value",
                  "has_data": true,
                  "data_args_count": 1
                }
              }
            },
            {
              "name": "batch_register_events",
              "args": [
                "self",
                "event_configs"
              ],
              "docstring": "Batch registration with complex SocketIO patterns.",
              "calls": [
                "socketio_events.SocketIOEventRegistry.create_event_handler::$config",
                "socketio_events.SocketIOEventRegistry.apply_middleware_stack::$handler",
                "socketio_events.config.get::middleware",
                "socketio_events.SocketIOEventRegistry.socketio.on::$event_name"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [],
              "emit_contexts": {
                "socketio_events.SocketIOEventRegistry.apply_middleware_stack::$handler_context": {
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.config.get::middleware_context": {
                  "has_data": true,
                  "data_args_count": 1
                }
              }
            },
            {
              "name": "create_event_handler",
              "args": [
                "self",
                "config"
              ],
              "docstring": "Factory method creating handlers with embedded SocketIO calls.",
              "calls": [
                "socketio_events.config.get::type",
                "socketio_events.SocketIOEventRegistry._create_room_handler::$config",
                "socketio_events.SocketIOEventRegistry._create_broadcast_handler::$config",
                "socketio_events.SocketIOEventRegistry._create_auth_handler::$config",
                "socketio_events.SocketIOEventRegistry._create_standard_handler::$config"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [],
              "emit_contexts": {
                "socketio_events.config.get::type_context": {
                  "has_data": true,
                  "data_args_count": 1
                }
              }
            },
            {
              "name": "_create_room_handler",
              "args": [
                "self",
                "config"
              ],
              "docstring": "Create room-based handler with complex SocketIO operations.",
              "calls": [
                "socketio_events.data.get::room",
                "socketio_events.SocketIOEventRegistry.session_manager.validate_room_access::$room_name",
                "flask_socketio.join_room::$room_name",
                "socketio_events.SocketIOEventRegistry.socketio.emit::user_joined_room",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_user_id::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_timestamp::unknown_event",
                "socketio_events.ACTIVE_ROOMS.get::$room_name",
                "socketio_events.SocketIOEventRegistry.socketio.emit::room_activity"
              ],
              "instantiations": [],
              "accessed_state": [
                "socketio_events.ACTIVE_ROOMS"
              ],
              "decorators": [],
              "emit_contexts": {
                "socketio_events.data.get::room_context": {
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.SocketIOEventRegistry.socketio.emit::user_joined_room_context": {
                  "room": "$room_name",
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.ACTIVE_ROOMS.get::$room_name_context": {
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.SocketIOEventRegistry.socketio.emit::room_activity_context": {
                  "room": "$active_room",
                  "has_data": true,
                  "data_args_count": 1
                }
              }
            },
            {
              "name": "_create_broadcast_handler",
              "args": [
                "self",
                "config"
              ],
              "docstring": "Create broadcast handler with complex emit patterns.",
              "calls": [
                "socketio_events.data.get::message",
                "socketio_events.SocketIOEventRegistry.message_validator.validate_message::$message",
                "socketio_events.SocketIOEventRegistry.socketio.emit::global_message",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_user_id::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_current_timestamp::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_active_users::unknown_event",
                "socketio_events.SocketIOEventRegistry.session_manager.get_user_room::$user_id",
                "socketio_events.SocketIOEventRegistry.socketio.emit::personal_message"
              ],
              "instantiations": [],
              "accessed_state": [],
              "decorators": [],
              "emit_contexts": {
                "socketio_events.data.get::message_context": {
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.SocketIOEventRegistry.socketio.emit::global_message_context": {
                  "broadcast": true,
                  "has_data": true,
                  "data_args_count": 1
                },
                "socketio_events.SocketIOEventRegistry.socketio.emit::personal_message_context": {
                  "room": "$user_room",
                  "has_data": true,
                  "data_args_count": 1
                }
              }
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "register_events",
          "args": [
            "socketio",
            "haven_proxy"
          ],
          "docstring": "\n    Primary event registration function with complex SocketIO patterns.\n    Ultimate stress test for decorator analysis and SocketIO emit tracking.\n    ",
          "calls": [
            "socketio_events.SocketIOEventRegistry::$socketio",
            "session_manager.SessionManager.create_session",
            "socketio_events.auth.get::is_runner",
            "flask_socketio.SocketIO.emit::runner_connected",
            "socketio_events._haven_proxy.get_runner_capabilities::unknown_event",
            "session_manager.SessionManager.get_current_timestamp",
            "flask_socketio.join_room::runners",
            "flask_socketio.SocketIO.emit::runner_room_joined",
            "socketio_events._haven_proxy.validate_user_credentials::$auth",
            "socketio_events.auth.get::user_id",
            "session_manager.SessionManager.create_user_session",
            "flask_socketio.SocketIO.emit::connection_established",
            "socketio_events._haven_proxy.get_user_preferences::$user_id",
            "flask_socketio.join_room::$user_room",
            "flask_socketio.SocketIO.emit::user_connected",
            "flask_socketio.SocketIO.emit::guest_connected",
            "socketio_events._haven_proxy.get_guest_limitations::unknown_event",
            "session_manager.SessionManager.get_current_session_id",
            "session_manager.SessionManager.get_current_user_id",
            "session_manager.SessionManager.cleanup_user_session",
            "flask_socketio.SocketIO.emit::user_disconnected",
            "session_manager.SessionManager.get_user_rooms",
            "flask_socketio.leave_room::$room",
            "flask_socketio.SocketIO.emit::user_left_room",
            "session_manager.SessionManager.destroy_session",
            "socketio_events.data.get::room",
            "socketio_events._haven_proxy.validate_room_access::$user_id",
            "flask_socketio.join_room::$room_name",
            "flask_socketio.SocketIO.emit::room_joined",
            "flask_socketio.SocketIO.emit::new_room_member",
            "socketio_events._haven_proxy.get_user_info::$user_id",
            "socketio_events._haven_proxy.get_room_statistics::$room_name",
            "flask_socketio.SocketIO.emit::room_stats_updated",
            "socketio_events.data.get::message",
            "socketio_events.data.get::target_type",
            "socketio_events.data.get::target",
            "socketio_events._haven_proxy.validate_message_content::$message",
            "flask_socketio.SocketIO.emit::message_rejected",
            "flask_socketio.SocketIO.emit::room_message",
            "socketio_events._haven_proxy.log_room_message::$target",
            "socketio_events._haven_proxy.validate_direct_message_permission::$user_id",
            "flask_socketio.SocketIO.emit::direct_message",
            "flask_socketio.SocketIO.emit::message_delivered",
            "socketio_events._haven_proxy.validate_broadcast_permission::$user_id",
            "flask_socketio.SocketIO.emit::broadcast_message",
            "socketio_events.SocketIOEventRegistry.batch_register_events::$dynamic_events",
            "socketio_events.SocketIOEventRegistry.register_dynamic_event::$event_name",
            "socketio_events.create_dynamic_handler::$event_name"
          ],
          "instantiations": [
            "session_manager.SessionManager"
          ],
          "accessed_state": [
            "socketio_events._socketio_instance",
            "socketio_events._haven_proxy"
          ],
          "decorators": [
            "@trace"
          ],
          "emit_contexts": {
            "socketio_events.SocketIOEventRegistry::$socketio_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::runner_connected_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::runner_room_joined_context": {
              "room": "runners",
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::connection_established_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::user_connected_context": {
              "broadcast": true,
              "include_self": false,
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::guest_connected_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::user_disconnected_context": {
              "broadcast": true,
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::user_left_room_context": {
              "room": "$room",
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._haven_proxy.validate_room_access::$user_id_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::room_joined_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::new_room_member_context": {
              "room": "$room_name",
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::room_stats_updated_context": {
              "room": "$room_name",
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events.data.get::message_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events.data.get::target_type_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._haven_proxy.validate_message_content::$message_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::message_rejected_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::room_message_context": {
              "room": "$target",
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._haven_proxy.log_room_message::$target_context": {
              "has_data": true,
              "data_args_count": 2
            },
            "socketio_events._haven_proxy.validate_direct_message_permission::$user_id_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::direct_message_context": {
              "room": "$target_room",
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::message_delivered_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "flask_socketio.SocketIO.emit::broadcast_message_context": {
              "broadcast": true,
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events.SocketIOEventRegistry.register_dynamic_event::$event_name_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events.create_dynamic_handler::$event_name_context": {
              "has_data": true,
              "data_args_count": 2
            }
          }
        },
        {
          "name": "create_dynamic_handler",
          "args": [
            "event_name",
            "proxy",
            "session_manager"
          ],
          "docstring": "Factory function creating dynamic handlers with embedded SocketIO calls.",
          "calls": [
            "session_manager.SessionManager.get_current_user_id",
            "proxy_handler.HavenProxy.validate_event_data",
            "proxy_handler.HavenProxy.process_event",
            "socketio_events._socketio_instance.emit::${event_name}_processed",
            "session_manager.SessionManager.get_current_timestamp",
            "socketio_events._socketio_instance.emit::${event_name}_notification",
            "socketio_events._socketio_instance.emit::${event_name}_room_update",
            "socketio_events._socketio_instance.emit::${event_name}_error"
          ],
          "instantiations": [],
          "accessed_state": [
            "socketio_events._socketio_instance"
          ],
          "decorators": [
            "@trace",
            "@monitor_performance"
          ],
          "emit_contexts": {
            "socketio_events._socketio_instance.emit::${event_name}_processed_context": {
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._socketio_instance.emit::${event_name}_notification_context": {
              "broadcast": true,
              "include_self": false,
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._socketio_instance.emit::${event_name}_room_update_context": {
              "room": "$room_name",
              "has_data": true,
              "data_args_count": 1
            },
            "socketio_events._socketio_instance.emit::${event_name}_error_context": {
              "has_data": true,
              "data_args_count": 1
            }
          }
        },
        {
          "name": "emergency_broadcast",
          "args": [
            "message",
            "severity"
          ],
          "docstring": "Emergency broadcast function using global SocketIO instance.",
          "calls": [
            "socketio_events._socketio_instance.emit::emergency_broadcast",
            "session_manager.SessionManager.get_current_timestamp"
          ],
          "instantiations": [],
          "accessed_state": [
            "socketio_events._socketio_instance",
            "socketio_events._haven_proxy"
          ],
          "decorators": [],
          "emit_contexts": {
            "socketio_events._socketio_instance.emit::emergency_broadcast_context": {
              "broadcast": true,
              "has_data": true,
              "data_args_count": 1
            }
          }
        },
        {
          "name": "admin_notification",
          "args": [
            "admin_id",
            "notification"
          ],
          "docstring": "Send notification to specific admin.",
          "calls": [
            "socketio_events._haven_proxy.validate_admin_role::$admin_id",
            "socketio_events._socketio_instance.emit::admin_notification"
          ],
          "instantiations": [],
          "accessed_state": [
            "socketio_events._socketio_instance",
            "socketio_events._haven_proxy"
          ],
          "decorators": [],
          "emit_contexts": {
            "socketio_events._socketio_instance.emit::admin_notification_context": {
              "room": "$admin_room",
              "has_data": true,
              "data_args_count": 1
            }
          }
        }
      ],
      "module_state": [
        {
          "name": "_socketio_instance",
          "value": "None"
        },
        {
          "name": "_haven_proxy",
          "value": "None"
        },
        {
          "name": "_session_manager",
          "value": "None"
        },
        {
          "name": "EVENT_HANDLERS",
          "value": "{}"
        },
        {
          "name": "ACTIVE_ROOMS",
          "value": "{}"
        }
      ]
    }
  }
}
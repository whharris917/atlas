{
  "recon_data": {
    "classes": {},
    "functions": {
      "compare_atlas_outputs.load_json_report": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "filepath": "str"
        }
      },
      "compare_atlas_outputs.compare_atlas_data": {
        "return_type": null,
        "param_types": {
          "data1": "Dict[str, Any]",
          "data2": "Dict[str, Any]",
          "name1": "str",
          "name2": "str"
        }
      },
      "compare_atlas_outputs.extract_all_calls": {
        "return_type": "set",
        "param_types": {
          "file_data": "Dict[str, Any]"
        }
      },
      "compare_atlas_outputs.main": {
        "return_type": null,
        "param_types": {}
      },
      "debug_info_functions.debug_info_functions": {
        "return_type": null,
        "param_types": {}
      },
      "phase_2_validation_test.test_reconnaissance_compatibility": {
        "return_type": null,
        "param_types": {}
      },
      "phase_2_validation_test.test_atlas_integration": {
        "return_type": null,
        "param_types": {}
      },
      "phase_2_validation_test.main": {
        "return_type": null,
        "param_types": {}
      },
      "quick_import_test.test_basic_imports": {
        "return_type": null,
        "param_types": {}
      },
      "quick_test_refactored.test_refactored_visitor": {
        "return_type": null,
        "param_types": {}
      },
      "test_compatability_isolation.create_simple_test_file": {
        "return_type": "pathlib.Path",
        "param_types": {}
      },
      "test_compatability_isolation.run_analysis_comparison": {
        "return_type": null,
        "param_types": {
          "test_file": "pathlib.Path"
        }
      },
      "test_compatability_isolation.main": {
        "return_type": null,
        "param_types": {}
      },
      "test_functionality.create_test_file": {
        "return_type": "pathlib.Path",
        "param_types": {}
      },
      "test_functionality.run_original_analysis": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "test_file": "pathlib.Path"
        }
      },
      "test_functionality.run_refactored_analysis": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "test_file": "pathlib.Path"
        }
      },
      "test_functionality.compare_results": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "original": "Dict[str, Any]",
          "refactored": "Dict[str, Any]"
        }
      },
      "test_functionality.test_functionality": {
        "return_type": null,
        "param_types": {}
      },
      "test_imports.test_imports": {
        "return_type": null,
        "param_types": {}
      },
      "test_import_resolution.test_import_resolution": {
        "return_type": null,
        "param_types": {}
      },
      "test_integration.find_stress_test_files": {
        "return_type": "List[pathlib.Path]",
        "param_types": {}
      },
      "test_integration.load_gold_standard": {
        "return_type": "Dict[str, Any]",
        "param_types": {}
      },
      "test_integration.run_full_analysis": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "python_files": "List[pathlib.Path]",
          "use_refactored": "bool"
        }
      },
      "test_integration.compare_with_gold_standard": {
        "return_type": "Dict[str, Any]",
        "param_types": {
          "result": "Dict[str, Any]",
          "gold_standard": "Dict[str, Any]"
        }
      },
      "test_integration.test_integration": {
        "return_type": null,
        "param_types": {}
      },
      "test_pure_original.run_pure_original": {
        "return_type": null,
        "param_types": {}
      }
    },
    "state": {
      "quick_import_test.success": {
        "type": "test_basic_imports",
        "inferred_from_value": true
      },
      "quick_test_refactored.success": {
        "type": "test_refactored_visitor",
        "inferred_from_value": true
      },
      "test_functionality.success": {
        "type": "test_functionality",
        "inferred_from_value": true
      },
      "test_imports.success": {
        "type": "test_imports",
        "inferred_from_value": true
      },
      "test_integration.success": {
        "type": "test_integration",
        "inferred_from_value": true
      }
    },
    "external_classes": {},
    "external_functions": {}
  },
  "atlas": {
    "compare_atlas_outputs.py": {
      "file_path": "compare_atlas_outputs.py",
      "module_docstring": "\nCompare Atlas outputs to find differences between pre/post refactor.\n",
      "imports": {
        "json": "json",
        "sys": "sys",
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "List": "typing.List",
        "Path": "pathlib.Path"
      },
      "classes": [],
      "functions": [
        {
          "name": "load_json_report",
          "args": [
            "filepath"
          ],
          "docstring": "Load Atlas JSON report.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "compare_atlas_data",
          "args": [
            "data1",
            "data2",
            "name1",
            "name2"
          ],
          "docstring": "Compare two Atlas data structures in detail.",
          "calls": [
            "compare_atlas_outputs.extract_all_calls"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "extract_all_calls",
          "args": [
            "file_data"
          ],
          "docstring": "Extract all function calls from a file's analysis data.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "main",
          "args": [],
          "docstring": "Main comparison function.",
          "calls": [
            "compare_atlas_outputs.load_json_report",
            "compare_atlas_outputs.compare_atlas_data"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "debug_info_functions.py": {
      "file_path": "debug_info_functions.py",
      "module_docstring": "\nDebug script to check what get_atlas_info() and get_recon_info() return\n",
      "imports": {
        "get_atlas_info": "analyzer.analysis_compat.get_atlas_info",
        "traceback": "traceback",
        "get_recon_info": "analyzer.recon_compat.get_recon_info"
      },
      "classes": [],
      "functions": [
        {
          "name": "debug_info_functions",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "phase_2_validation_test.py": {
      "file_path": "phase_2_validation_test.py",
      "module_docstring": "\nPhase 2 Validation Test - Atlas Reconnaissance Refactoring\n\nQuick test to validate that the refactored reconnaissance system is working properly\nand produces the same output as the original system.\n",
      "imports": {
        "sys": "sys",
        "pathlib": "pathlib",
        "json": "json",
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "discover_python_files": "analyzer.utils.discover_python_files",
        "get_recon_info": "analyzer.recon_compat.get_recon_info",
        "run_reconnaissance_pass_compat": "analyzer.recon_compat.run_reconnaissance_pass_compat",
        "get_atlas_info": "analyzer.analysis_compat.get_atlas_info",
        "traceback": "traceback"
      },
      "classes": [],
      "functions": [
        {
          "name": "test_reconnaissance_compatibility",
          "args": [],
          "docstring": "Test that refactored reconnaissance produces same output as original.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "test_atlas_integration",
          "args": [],
          "docstring": "Test that the updated atlas.py works with the new reconnaissance system.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "main",
          "args": [],
          "docstring": "Run all validation tests.",
          "calls": [
            "phase_2_validation_test.test_reconnaissance_compatibility",
            "phase_2_validation_test.test_atlas_integration"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "quick_import_test.py": {
      "file_path": "quick_import_test.py",
      "module_docstring": "\nQuick import test to verify the fixes work.\n",
      "imports": {
        "LOG_LEVEL": "analyzer.utils.LOG_LEVEL",
        "EXTERNAL_LIBRARY_ALLOWLIST": "analyzer.utils.EXTERNAL_LIBRARY_ALLOWLIST",
        "ViolationType": "analyzer.utils.ViolationType",
        "AnalysisVisitor": "analyzer.analysis.AnalysisVisitor",
        "NameResolver": "analyzer.resolver.NameResolver",
        "SymbolTableManager": "analyzer.symbol_table.SymbolTableManager",
        "RefactoredAnalysisVisitor": "analyzer.visitors.analysis_refactored.RefactoredAnalysisVisitor",
        "get_atlas_info": "analyzer.analysis_compat.get_atlas_info",
        "traceback": "traceback"
      },
      "classes": [],
      "functions": [
        {
          "name": "test_basic_imports",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "success",
          "value": "test_basic_imports()"
        }
      ]
    },
    "quick_test_refactored.py": {
      "file_path": "quick_test_refactored.py",
      "module_docstring": "\nQuick test to check if the refactored visitor works now.\n",
      "imports": {
        "ast": "ast",
        "tempfile": "tempfile",
        "pathlib": "pathlib",
        "run_reconnaissance_pass": "analyzer.recon.run_reconnaissance_pass",
        "RefactoredAnalysisVisitor": "analyzer.visitors.analysis_refactored.RefactoredAnalysisVisitor",
        "traceback": "traceback"
      },
      "classes": [],
      "functions": [
        {
          "name": "test_refactored_visitor",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "success",
          "value": "test_refactored_visitor()"
        }
      ]
    },
    "test_compatability_isolation.py": {
      "file_path": "test_compatability_isolation.py",
      "module_docstring": "\nIsolation test to find what's causing differences between original and refactored output.\n",
      "imports": {
        "json": "json",
        "tempfile": "tempfile",
        "pathlib": "pathlib",
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "run_reconnaissance_pass": "analyzer.recon.run_reconnaissance_pass",
        "original_analysis": "analyzer.analysis.run_analysis_pass",
        "run_analysis_pass_compat": "analyzer.analysis_compat.run_analysis_pass_compat"
      },
      "classes": [],
      "functions": [
        {
          "name": "create_simple_test_file",
          "args": [],
          "docstring": "Create a very simple test file to isolate differences.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "run_analysis_comparison",
          "args": [
            "test_file"
          ],
          "docstring": "Run both original and current analysis on the same file.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "main",
          "args": [],
          "docstring": "Main isolation test.",
          "calls": [
            "test_compatability_isolation.create_simple_test_file",
            "test_compatability_isolation.run_analysis_comparison"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "test_functionality.py": {
      "file_path": "test_functionality.py",
      "module_docstring": "\nFunctionality Test Script - Atlas Refactoring\n\nTest that refactored code produces identical results to original code.\nRun this after import test passes.\n",
      "imports": {
        "ast": "ast",
        "json": "json",
        "sys": "sys",
        "tempfile": "tempfile",
        "pathlib": "pathlib",
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "run_reconnaissance_pass": "analyzer.recon.run_reconnaissance_pass",
        "run_analysis_pass": "analyzer.analysis.run_analysis_pass",
        "run_analysis_pass_compat": "analyzer.analysis_compat.run_analysis_pass_compat"
      },
      "classes": [],
      "functions": [
        {
          "name": "create_test_file",
          "args": [],
          "docstring": "Create a test Python file with various patterns.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "run_original_analysis",
          "args": [
            "test_file"
          ],
          "docstring": "Run analysis using original implementation.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "run_refactored_analysis",
          "args": [
            "test_file"
          ],
          "docstring": "Run analysis using refactored implementation.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "compare_results",
          "args": [
            "original",
            "refactored"
          ],
          "docstring": "Compare results from original and refactored implementations.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "test_functionality",
          "args": [],
          "docstring": "Main functionality test.",
          "calls": [
            "test_functionality.create_test_file",
            "test_functionality.run_original_analysis",
            "test_functionality.run_refactored_analysis",
            "test_functionality.compare_results"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "success",
          "value": "test_functionality()"
        }
      ]
    },
    "test_import.py": {
      "file_path": "test_import.py",
      "module_docstring": null,
      "imports": {
        "run_reconnaissance_pass_refactored": "analyzer.visitors.recon_refactored.run_reconnaissance_pass_refactored",
        "traceback": "traceback"
      },
      "classes": [],
      "functions": [],
      "module_state": []
    },
    "test_imports.py": {
      "file_path": "test_imports.py",
      "module_docstring": "\nImport Test Script - Atlas Refactoring\n\nTest that all refactored components can be imported correctly.\nPlace this in the same directory as atlas.py and run it first.\n",
      "imports": {
        "sys": "sys",
        "traceback": "traceback",
        "CompatibilityAnalysisVisitor": "analyzer.analysis_compat.CompatibilityAnalysisVisitor",
        "run_analysis_pass_compat": "analyzer.analysis_compat.run_analysis_pass_compat",
        "test_compatibility": "analyzer.analysis_compat.test_compatibility",
        "get_atlas_info": "analyzer.analysis_compat.get_atlas_info"
      },
      "classes": [],
      "functions": [
        {
          "name": "test_imports",
          "args": [],
          "docstring": "Test all refactored component imports.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "success",
          "value": "test_imports()"
        }
      ]
    },
    "test_import_resolution.py": {
      "file_path": "test_import_resolution.py",
      "module_docstring": "\nTest script to understand Python import resolution between\nanalyzer/utils.py and analyzer/utils/ directory.\n",
      "imports": {
        "utils": "analyzer.utils",
        "LOG_LEVEL": "analyzer.utils.LOG_LEVEL",
        "os": "os"
      },
      "classes": [],
      "functions": [
        {
          "name": "test_import_resolution",
          "args": [],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    },
    "test_integration.py": {
      "file_path": "test_integration.py",
      "module_docstring": "\nIntegration Test Script - Atlas Refactoring\n\nTest refactored code against the actual stress test files to ensure\nit produces identical output to the gold standard.\n",
      "imports": {
        "json": "json",
        "sys": "sys",
        "pathlib": "pathlib",
        "Dict": "typing.Dict",
        "Any": "typing.Any",
        "List": "typing.List",
        "run_reconnaissance_pass": "analyzer.recon.run_reconnaissance_pass",
        "run_analysis_pass_compat": "analyzer.analysis_compat.run_analysis_pass_compat",
        "traceback": "traceback"
      },
      "classes": [],
      "functions": [
        {
          "name": "find_stress_test_files",
          "args": [],
          "docstring": "Find the stress test Python files.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "load_gold_standard",
          "args": [],
          "docstring": "Load the gold standard report for comparison.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "run_full_analysis",
          "args": [
            "python_files",
            "use_refactored"
          ],
          "docstring": "Run full two-pass analysis.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "count_calls_in_functions",
          "args": [
            "funcs"
          ],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "count_calls_in_classes",
          "args": [
            "classes"
          ],
          "docstring": null,
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "compare_with_gold_standard",
          "args": [
            "result",
            "gold_standard"
          ],
          "docstring": "Compare analysis result with gold standard.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        },
        {
          "name": "test_integration",
          "args": [],
          "docstring": "Main integration test.",
          "calls": [
            "test_integration.find_stress_test_files",
            "test_integration.load_gold_standard",
            "test_integration.run_full_analysis",
            "test_integration.compare_with_gold_standard"
          ],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": [
        {
          "name": "success",
          "value": "test_integration()"
        }
      ]
    },
    "test_pure_original.py": {
      "file_path": "test_pure_original.py",
      "module_docstring": null,
      "imports": {
        "sys": "sys",
        "pathlib": "pathlib",
        "discover_python_files": "analyzer.utils.discover_python_files",
        "validate_python_version": "analyzer.utils.validate_python_version",
        "generate_json_report": "analyzer.utils.generate_json_report",
        "run_reconnaissance_pass": "analyzer.recon.run_reconnaissance_pass",
        "run_analysis_pass": "analyzer.analysis.run_analysis_pass"
      },
      "classes": [],
      "functions": [
        {
          "name": "run_pure_original",
          "args": [],
          "docstring": "Run Atlas using exclusively original code.",
          "calls": [],
          "instantiations": [],
          "accessed_state": [],
          "decorators": []
        }
      ],
      "module_state": []
    }
  }
}